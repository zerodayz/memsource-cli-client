# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'user_name': 'str',
        'email': 'str',
        'role': 'str',
        'id': 'str',
        'uid': 'str'
    }

    attribute_map = {
        'first_name': 'firstName',
        'last_name': 'lastName',
        'user_name': 'userName',
        'email': 'email',
        'role': 'role',
        'id': 'id',
        'uid': 'uid'
    }

    def __init__(self, first_name=None, last_name=None, user_name=None, email=None, role=None, id=None, uid=None):  # noqa: E501
        """UserReference - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._last_name = None
        self._user_name = None
        self._email = None
        self._role = None
        self._id = None
        self._uid = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if user_name is not None:
            self.user_name = user_name
        if email is not None:
            self.email = email
        if role is not None:
            self.role = role
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid

    @property
    def first_name(self):
        """Gets the first_name of this UserReference.  # noqa: E501


        :return: The first_name of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserReference.


        :param first_name: The first_name of this UserReference.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserReference.  # noqa: E501


        :return: The last_name of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserReference.


        :param last_name: The last_name of this UserReference.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def user_name(self):
        """Gets the user_name of this UserReference.  # noqa: E501


        :return: The user_name of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserReference.


        :param user_name: The user_name of this UserReference.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def email(self):
        """Gets the email of this UserReference.  # noqa: E501


        :return: The email of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserReference.


        :param email: The email of this UserReference.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this UserReference.  # noqa: E501


        :return: The role of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserReference.


        :param role: The role of this UserReference.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYS_ADMIN", "SYS_ADMIN_READ", "ADMIN", "PROJECT_MANAGER", "LINGUIST", "GUEST", "SUBMITTER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def id(self):
        """Gets the id of this UserReference.  # noqa: E501


        :return: The id of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserReference.


        :param id: The id of this UserReference.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this UserReference.  # noqa: E501


        :return: The uid of this UserReference.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this UserReference.


        :param uid: The uid of this UserReference.  # noqa: E501
        :type: str
        """

        self._uid = uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
