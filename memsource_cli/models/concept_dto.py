# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.term_dto import TermDto  # noqa: F401,E501


class ConceptDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'writable': 'bool',
        'terms': 'list[list[TermDto]]'
    }

    attribute_map = {
        'id': 'id',
        'writable': 'writable',
        'terms': 'terms'
    }

    def __init__(self, id=None, writable=None, terms=None):  # noqa: E501
        """ConceptDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._writable = None
        self._terms = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if writable is not None:
            self.writable = writable
        if terms is not None:
            self.terms = terms

    @property
    def id(self):
        """Gets the id of this ConceptDto.  # noqa: E501


        :return: The id of this ConceptDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConceptDto.


        :param id: The id of this ConceptDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def writable(self):
        """Gets the writable of this ConceptDto.  # noqa: E501


        :return: The writable of this ConceptDto.  # noqa: E501
        :rtype: bool
        """
        return self._writable

    @writable.setter
    def writable(self, writable):
        """Sets the writable of this ConceptDto.


        :param writable: The writable of this ConceptDto.  # noqa: E501
        :type: bool
        """

        self._writable = writable

    @property
    def terms(self):
        """Gets the terms of this ConceptDto.  # noqa: E501


        :return: The terms of this ConceptDto.  # noqa: E501
        :rtype: list[list[TermDto]]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ConceptDto.


        :param terms: The terms of this ConceptDto.  # noqa: E501
        :type: list[list[TermDto]]
        """

        self._terms = terms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConceptDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConceptDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
