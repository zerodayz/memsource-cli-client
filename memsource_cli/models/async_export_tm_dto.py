# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501
from memsource_cli.models.query import Query  # noqa: F401,E501


class AsyncExportTMDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'async_request': 'IdReference',
        'trans_memory': 'IdReference',
        'export_target_langs': 'list[str]',
        'queries': 'list[Query]'
    }

    attribute_map = {
        'async_request': 'asyncRequest',
        'trans_memory': 'transMemory',
        'export_target_langs': 'exportTargetLangs',
        'queries': 'queries'
    }

    def __init__(self, async_request=None, trans_memory=None, export_target_langs=None, queries=None):  # noqa: E501
        """AsyncExportTMDto - a model defined in Swagger"""  # noqa: E501

        self._async_request = None
        self._trans_memory = None
        self._export_target_langs = None
        self._queries = None
        self.discriminator = None

        if async_request is not None:
            self.async_request = async_request
        if trans_memory is not None:
            self.trans_memory = trans_memory
        if export_target_langs is not None:
            self.export_target_langs = export_target_langs
        if queries is not None:
            self.queries = queries

    @property
    def async_request(self):
        """Gets the async_request of this AsyncExportTMDto.  # noqa: E501


        :return: The async_request of this AsyncExportTMDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._async_request

    @async_request.setter
    def async_request(self, async_request):
        """Sets the async_request of this AsyncExportTMDto.


        :param async_request: The async_request of this AsyncExportTMDto.  # noqa: E501
        :type: IdReference
        """

        self._async_request = async_request

    @property
    def trans_memory(self):
        """Gets the trans_memory of this AsyncExportTMDto.  # noqa: E501


        :return: The trans_memory of this AsyncExportTMDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._trans_memory

    @trans_memory.setter
    def trans_memory(self, trans_memory):
        """Sets the trans_memory of this AsyncExportTMDto.


        :param trans_memory: The trans_memory of this AsyncExportTMDto.  # noqa: E501
        :type: IdReference
        """

        self._trans_memory = trans_memory

    @property
    def export_target_langs(self):
        """Gets the export_target_langs of this AsyncExportTMDto.  # noqa: E501


        :return: The export_target_langs of this AsyncExportTMDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_target_langs

    @export_target_langs.setter
    def export_target_langs(self, export_target_langs):
        """Sets the export_target_langs of this AsyncExportTMDto.


        :param export_target_langs: The export_target_langs of this AsyncExportTMDto.  # noqa: E501
        :type: list[str]
        """

        self._export_target_langs = export_target_langs

    @property
    def queries(self):
        """Gets the queries of this AsyncExportTMDto.  # noqa: E501


        :return: The queries of this AsyncExportTMDto.  # noqa: E501
        :rtype: list[Query]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this AsyncExportTMDto.


        :param queries: The queries of this AsyncExportTMDto.  # noqa: E501
        :type: list[Query]
        """

        self._queries = queries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsyncExportTMDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsyncExportTMDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
