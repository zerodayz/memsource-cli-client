# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XlfSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'import_notes': 'bool',
        'segmentation': 'bool',
        'skip_import_rules': 'str',
        'import_as_confirmed_rules': 'str',
        'import_as_locked_rules': 'str',
        'export_attrs_when_confirmed_and_locked': 'str',
        'export_attrs_when_confirmed_and_not_locked': 'str',
        'export_attrs_when_not_confirmed_and_locked': 'str',
        'export_attrs_when_not_confirmed_and_not_locked': 'str',
        'save_confirmed_segments': 'bool',
        'line_break_tags': 'bool',
        'preserve_whitespace': 'bool',
        'context_type': 'str',
        'copy_source_to_target_if_not_imported': 'bool',
        'import_x_path': 'str',
        'import_as_confirmed_x_path': 'str',
        'import_as_locked_x_path': 'str'
    }

    attribute_map = {
        'import_notes': 'importNotes',
        'segmentation': 'segmentation',
        'skip_import_rules': 'skipImportRules',
        'import_as_confirmed_rules': 'importAsConfirmedRules',
        'import_as_locked_rules': 'importAsLockedRules',
        'export_attrs_when_confirmed_and_locked': 'exportAttrsWhenConfirmedAndLocked',
        'export_attrs_when_confirmed_and_not_locked': 'exportAttrsWhenConfirmedAndNotLocked',
        'export_attrs_when_not_confirmed_and_locked': 'exportAttrsWhenNotConfirmedAndLocked',
        'export_attrs_when_not_confirmed_and_not_locked': 'exportAttrsWhenNotConfirmedAndNotLocked',
        'save_confirmed_segments': 'saveConfirmedSegments',
        'line_break_tags': 'lineBreakTags',
        'preserve_whitespace': 'preserveWhitespace',
        'context_type': 'contextType',
        'copy_source_to_target_if_not_imported': 'copySourceToTargetIfNotImported',
        'import_x_path': 'importXPath',
        'import_as_confirmed_x_path': 'importAsConfirmedXPath',
        'import_as_locked_x_path': 'importAsLockedXPath'
    }

    def __init__(self, import_notes=None, segmentation=None, skip_import_rules=None, import_as_confirmed_rules=None, import_as_locked_rules=None, export_attrs_when_confirmed_and_locked=None, export_attrs_when_confirmed_and_not_locked=None, export_attrs_when_not_confirmed_and_locked=None, export_attrs_when_not_confirmed_and_not_locked=None, save_confirmed_segments=None, line_break_tags=None, preserve_whitespace=None, context_type=None, copy_source_to_target_if_not_imported=None, import_x_path=None, import_as_confirmed_x_path=None, import_as_locked_x_path=None):  # noqa: E501
        """XlfSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._import_notes = None
        self._segmentation = None
        self._skip_import_rules = None
        self._import_as_confirmed_rules = None
        self._import_as_locked_rules = None
        self._export_attrs_when_confirmed_and_locked = None
        self._export_attrs_when_confirmed_and_not_locked = None
        self._export_attrs_when_not_confirmed_and_locked = None
        self._export_attrs_when_not_confirmed_and_not_locked = None
        self._save_confirmed_segments = None
        self._line_break_tags = None
        self._preserve_whitespace = None
        self._context_type = None
        self._copy_source_to_target_if_not_imported = None
        self._import_x_path = None
        self._import_as_confirmed_x_path = None
        self._import_as_locked_x_path = None
        self.discriminator = None

        if import_notes is not None:
            self.import_notes = import_notes
        if segmentation is not None:
            self.segmentation = segmentation
        if skip_import_rules is not None:
            self.skip_import_rules = skip_import_rules
        if import_as_confirmed_rules is not None:
            self.import_as_confirmed_rules = import_as_confirmed_rules
        if import_as_locked_rules is not None:
            self.import_as_locked_rules = import_as_locked_rules
        if export_attrs_when_confirmed_and_locked is not None:
            self.export_attrs_when_confirmed_and_locked = export_attrs_when_confirmed_and_locked
        if export_attrs_when_confirmed_and_not_locked is not None:
            self.export_attrs_when_confirmed_and_not_locked = export_attrs_when_confirmed_and_not_locked
        if export_attrs_when_not_confirmed_and_locked is not None:
            self.export_attrs_when_not_confirmed_and_locked = export_attrs_when_not_confirmed_and_locked
        if export_attrs_when_not_confirmed_and_not_locked is not None:
            self.export_attrs_when_not_confirmed_and_not_locked = export_attrs_when_not_confirmed_and_not_locked
        if save_confirmed_segments is not None:
            self.save_confirmed_segments = save_confirmed_segments
        if line_break_tags is not None:
            self.line_break_tags = line_break_tags
        if preserve_whitespace is not None:
            self.preserve_whitespace = preserve_whitespace
        if context_type is not None:
            self.context_type = context_type
        if copy_source_to_target_if_not_imported is not None:
            self.copy_source_to_target_if_not_imported = copy_source_to_target_if_not_imported
        if import_x_path is not None:
            self.import_x_path = import_x_path
        if import_as_confirmed_x_path is not None:
            self.import_as_confirmed_x_path = import_as_confirmed_x_path
        if import_as_locked_x_path is not None:
            self.import_as_locked_x_path = import_as_locked_x_path

    @property
    def import_notes(self):
        """Gets the import_notes of this XlfSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The import_notes of this XlfSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._import_notes

    @import_notes.setter
    def import_notes(self, import_notes):
        """Sets the import_notes of this XlfSettingsDto.

        Default: true  # noqa: E501

        :param import_notes: The import_notes of this XlfSettingsDto.  # noqa: E501
        :type: bool
        """

        self._import_notes = import_notes

    @property
    def segmentation(self):
        """Gets the segmentation of this XlfSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The segmentation of this XlfSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._segmentation

    @segmentation.setter
    def segmentation(self, segmentation):
        """Sets the segmentation of this XlfSettingsDto.

        Default: true  # noqa: E501

        :param segmentation: The segmentation of this XlfSettingsDto.  # noqa: E501
        :type: bool
        """

        self._segmentation = segmentation

    @property
    def skip_import_rules(self):
        """Gets the skip_import_rules of this XlfSettingsDto.  # noqa: E501

        Default: translate=no; examples: translate=no;approved=no;state=needs-adaptation  # noqa: E501

        :return: The skip_import_rules of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._skip_import_rules

    @skip_import_rules.setter
    def skip_import_rules(self, skip_import_rules):
        """Sets the skip_import_rules of this XlfSettingsDto.

        Default: translate=no; examples: translate=no;approved=no;state=needs-adaptation  # noqa: E501

        :param skip_import_rules: The skip_import_rules of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._skip_import_rules = skip_import_rules

    @property
    def import_as_confirmed_rules(self):
        """Gets the import_as_confirmed_rules of this XlfSettingsDto.  # noqa: E501

        Multiple rules must be separated by semicolon  # noqa: E501

        :return: The import_as_confirmed_rules of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_as_confirmed_rules

    @import_as_confirmed_rules.setter
    def import_as_confirmed_rules(self, import_as_confirmed_rules):
        """Sets the import_as_confirmed_rules of this XlfSettingsDto.

        Multiple rules must be separated by semicolon  # noqa: E501

        :param import_as_confirmed_rules: The import_as_confirmed_rules of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_as_confirmed_rules = import_as_confirmed_rules

    @property
    def import_as_locked_rules(self):
        """Gets the import_as_locked_rules of this XlfSettingsDto.  # noqa: E501


        :return: The import_as_locked_rules of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_as_locked_rules

    @import_as_locked_rules.setter
    def import_as_locked_rules(self, import_as_locked_rules):
        """Sets the import_as_locked_rules of this XlfSettingsDto.


        :param import_as_locked_rules: The import_as_locked_rules of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_as_locked_rules = import_as_locked_rules

    @property
    def export_attrs_when_confirmed_and_locked(self):
        """Gets the export_attrs_when_confirmed_and_locked of this XlfSettingsDto.  # noqa: E501


        :return: The export_attrs_when_confirmed_and_locked of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_confirmed_and_locked

    @export_attrs_when_confirmed_and_locked.setter
    def export_attrs_when_confirmed_and_locked(self, export_attrs_when_confirmed_and_locked):
        """Sets the export_attrs_when_confirmed_and_locked of this XlfSettingsDto.


        :param export_attrs_when_confirmed_and_locked: The export_attrs_when_confirmed_and_locked of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_confirmed_and_locked = export_attrs_when_confirmed_and_locked

    @property
    def export_attrs_when_confirmed_and_not_locked(self):
        """Gets the export_attrs_when_confirmed_and_not_locked of this XlfSettingsDto.  # noqa: E501


        :return: The export_attrs_when_confirmed_and_not_locked of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_confirmed_and_not_locked

    @export_attrs_when_confirmed_and_not_locked.setter
    def export_attrs_when_confirmed_and_not_locked(self, export_attrs_when_confirmed_and_not_locked):
        """Sets the export_attrs_when_confirmed_and_not_locked of this XlfSettingsDto.


        :param export_attrs_when_confirmed_and_not_locked: The export_attrs_when_confirmed_and_not_locked of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_confirmed_and_not_locked = export_attrs_when_confirmed_and_not_locked

    @property
    def export_attrs_when_not_confirmed_and_locked(self):
        """Gets the export_attrs_when_not_confirmed_and_locked of this XlfSettingsDto.  # noqa: E501


        :return: The export_attrs_when_not_confirmed_and_locked of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_not_confirmed_and_locked

    @export_attrs_when_not_confirmed_and_locked.setter
    def export_attrs_when_not_confirmed_and_locked(self, export_attrs_when_not_confirmed_and_locked):
        """Sets the export_attrs_when_not_confirmed_and_locked of this XlfSettingsDto.


        :param export_attrs_when_not_confirmed_and_locked: The export_attrs_when_not_confirmed_and_locked of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_not_confirmed_and_locked = export_attrs_when_not_confirmed_and_locked

    @property
    def export_attrs_when_not_confirmed_and_not_locked(self):
        """Gets the export_attrs_when_not_confirmed_and_not_locked of this XlfSettingsDto.  # noqa: E501


        :return: The export_attrs_when_not_confirmed_and_not_locked of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._export_attrs_when_not_confirmed_and_not_locked

    @export_attrs_when_not_confirmed_and_not_locked.setter
    def export_attrs_when_not_confirmed_and_not_locked(self, export_attrs_when_not_confirmed_and_not_locked):
        """Sets the export_attrs_when_not_confirmed_and_not_locked of this XlfSettingsDto.


        :param export_attrs_when_not_confirmed_and_not_locked: The export_attrs_when_not_confirmed_and_not_locked of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._export_attrs_when_not_confirmed_and_not_locked = export_attrs_when_not_confirmed_and_not_locked

    @property
    def save_confirmed_segments(self):
        """Gets the save_confirmed_segments of this XlfSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The save_confirmed_segments of this XlfSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._save_confirmed_segments

    @save_confirmed_segments.setter
    def save_confirmed_segments(self, save_confirmed_segments):
        """Sets the save_confirmed_segments of this XlfSettingsDto.

        Default: true  # noqa: E501

        :param save_confirmed_segments: The save_confirmed_segments of this XlfSettingsDto.  # noqa: E501
        :type: bool
        """

        self._save_confirmed_segments = save_confirmed_segments

    @property
    def line_break_tags(self):
        """Gets the line_break_tags of this XlfSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The line_break_tags of this XlfSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._line_break_tags

    @line_break_tags.setter
    def line_break_tags(self, line_break_tags):
        """Sets the line_break_tags of this XlfSettingsDto.

        Default: false  # noqa: E501

        :param line_break_tags: The line_break_tags of this XlfSettingsDto.  # noqa: E501
        :type: bool
        """

        self._line_break_tags = line_break_tags

    @property
    def preserve_whitespace(self):
        """Gets the preserve_whitespace of this XlfSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The preserve_whitespace of this XlfSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._preserve_whitespace

    @preserve_whitespace.setter
    def preserve_whitespace(self, preserve_whitespace):
        """Sets the preserve_whitespace of this XlfSettingsDto.

        Default: true  # noqa: E501

        :param preserve_whitespace: The preserve_whitespace of this XlfSettingsDto.  # noqa: E501
        :type: bool
        """

        self._preserve_whitespace = preserve_whitespace

    @property
    def context_type(self):
        """Gets the context_type of this XlfSettingsDto.  # noqa: E501


        :return: The context_type of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this XlfSettingsDto.


        :param context_type: The context_type of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def copy_source_to_target_if_not_imported(self):
        """Gets the copy_source_to_target_if_not_imported of this XlfSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The copy_source_to_target_if_not_imported of this XlfSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._copy_source_to_target_if_not_imported

    @copy_source_to_target_if_not_imported.setter
    def copy_source_to_target_if_not_imported(self, copy_source_to_target_if_not_imported):
        """Sets the copy_source_to_target_if_not_imported of this XlfSettingsDto.

        Default: true  # noqa: E501

        :param copy_source_to_target_if_not_imported: The copy_source_to_target_if_not_imported of this XlfSettingsDto.  # noqa: E501
        :type: bool
        """

        self._copy_source_to_target_if_not_imported = copy_source_to_target_if_not_imported

    @property
    def import_x_path(self):
        """Gets the import_x_path of this XlfSettingsDto.  # noqa: E501


        :return: The import_x_path of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_x_path

    @import_x_path.setter
    def import_x_path(self, import_x_path):
        """Sets the import_x_path of this XlfSettingsDto.


        :param import_x_path: The import_x_path of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_x_path = import_x_path

    @property
    def import_as_confirmed_x_path(self):
        """Gets the import_as_confirmed_x_path of this XlfSettingsDto.  # noqa: E501


        :return: The import_as_confirmed_x_path of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_as_confirmed_x_path

    @import_as_confirmed_x_path.setter
    def import_as_confirmed_x_path(self, import_as_confirmed_x_path):
        """Sets the import_as_confirmed_x_path of this XlfSettingsDto.


        :param import_as_confirmed_x_path: The import_as_confirmed_x_path of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_as_confirmed_x_path = import_as_confirmed_x_path

    @property
    def import_as_locked_x_path(self):
        """Gets the import_as_locked_x_path of this XlfSettingsDto.  # noqa: E501


        :return: The import_as_locked_x_path of this XlfSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_as_locked_x_path

    @import_as_locked_x_path.setter
    def import_as_locked_x_path(self, import_as_locked_x_path):
        """Sets the import_as_locked_x_path of this XlfSettingsDto.


        :param import_as_locked_x_path: The import_as_locked_x_path of this XlfSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_as_locked_x_path = import_as_locked_x_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XlfSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XlfSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
