# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PreTranslateSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'translation_memory': 'bool',
        'translation_memory_threshold': 'float',
        'auto_propagate_repetitions': 'bool',
        'machine_translation': 'bool',
        'non_translatables': 'bool',
        'repetitions_as_confirmed': 'bool',
        'matches100_as_translated': 'bool',
        'matches101_as_translate': 'bool',
        'non_translatables_as_translated': 'bool',
        'pre_translate_on_job_creation': 'bool',
        'set_job_status_completed': 'bool',
        'set_job_status_completed_when_confirmed': 'bool',
        'set_project_status_completed': 'bool',
        'lock_non_translatables': 'bool',
        'lock100': 'bool',
        'lock101': 'bool',
        'non_translatables_in_editors': 'bool'
    }

    attribute_map = {
        'translation_memory': 'translationMemory',
        'translation_memory_threshold': 'translationMemoryThreshold',
        'auto_propagate_repetitions': 'autoPropagateRepetitions',
        'machine_translation': 'machineTranslation',
        'non_translatables': 'nonTranslatables',
        'repetitions_as_confirmed': 'repetitionsAsConfirmed',
        'matches100_as_translated': 'matches100AsTranslated',
        'matches101_as_translate': 'matches101AsTranslate',
        'non_translatables_as_translated': 'nonTranslatablesAsTranslated',
        'pre_translate_on_job_creation': 'preTranslateOnJobCreation',
        'set_job_status_completed': 'setJobStatusCompleted',
        'set_job_status_completed_when_confirmed': 'setJobStatusCompletedWhenConfirmed',
        'set_project_status_completed': 'setProjectStatusCompleted',
        'lock_non_translatables': 'lockNonTranslatables',
        'lock100': 'lock100',
        'lock101': 'lock101',
        'non_translatables_in_editors': 'nonTranslatablesInEditors'
    }

    def __init__(self, translation_memory=None, translation_memory_threshold=None, auto_propagate_repetitions=None, machine_translation=None, non_translatables=None, repetitions_as_confirmed=None, matches100_as_translated=None, matches101_as_translate=None, non_translatables_as_translated=None, pre_translate_on_job_creation=None, set_job_status_completed=None, set_job_status_completed_when_confirmed=None, set_project_status_completed=None, lock_non_translatables=None, lock100=None, lock101=None, non_translatables_in_editors=None):  # noqa: E501
        """PreTranslateSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._translation_memory = None
        self._translation_memory_threshold = None
        self._auto_propagate_repetitions = None
        self._machine_translation = None
        self._non_translatables = None
        self._repetitions_as_confirmed = None
        self._matches100_as_translated = None
        self._matches101_as_translate = None
        self._non_translatables_as_translated = None
        self._pre_translate_on_job_creation = None
        self._set_job_status_completed = None
        self._set_job_status_completed_when_confirmed = None
        self._set_project_status_completed = None
        self._lock_non_translatables = None
        self._lock100 = None
        self._lock101 = None
        self._non_translatables_in_editors = None
        self.discriminator = None

        if translation_memory is not None:
            self.translation_memory = translation_memory
        if translation_memory_threshold is not None:
            self.translation_memory_threshold = translation_memory_threshold
        if auto_propagate_repetitions is not None:
            self.auto_propagate_repetitions = auto_propagate_repetitions
        if machine_translation is not None:
            self.machine_translation = machine_translation
        if non_translatables is not None:
            self.non_translatables = non_translatables
        if repetitions_as_confirmed is not None:
            self.repetitions_as_confirmed = repetitions_as_confirmed
        if matches100_as_translated is not None:
            self.matches100_as_translated = matches100_as_translated
        if matches101_as_translate is not None:
            self.matches101_as_translate = matches101_as_translate
        if non_translatables_as_translated is not None:
            self.non_translatables_as_translated = non_translatables_as_translated
        if pre_translate_on_job_creation is not None:
            self.pre_translate_on_job_creation = pre_translate_on_job_creation
        if set_job_status_completed is not None:
            self.set_job_status_completed = set_job_status_completed
        if set_job_status_completed_when_confirmed is not None:
            self.set_job_status_completed_when_confirmed = set_job_status_completed_when_confirmed
        if set_project_status_completed is not None:
            self.set_project_status_completed = set_project_status_completed
        if lock_non_translatables is not None:
            self.lock_non_translatables = lock_non_translatables
        if lock100 is not None:
            self.lock100 = lock100
        if lock101 is not None:
            self.lock101 = lock101
        if non_translatables_in_editors is not None:
            self.non_translatables_in_editors = non_translatables_in_editors

    @property
    def translation_memory(self):
        """Gets the translation_memory of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate from translation memory. Default: false  # noqa: E501

        :return: The translation_memory of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._translation_memory

    @translation_memory.setter
    def translation_memory(self, translation_memory):
        """Sets the translation_memory of this PreTranslateSettingsDto.

        Pre-translate from translation memory. Default: false  # noqa: E501

        :param translation_memory: The translation_memory of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._translation_memory = translation_memory

    @property
    def translation_memory_threshold(self):
        """Gets the translation_memory_threshold of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translation threshold percent  # noqa: E501

        :return: The translation_memory_threshold of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: float
        """
        return self._translation_memory_threshold

    @translation_memory_threshold.setter
    def translation_memory_threshold(self, translation_memory_threshold):
        """Sets the translation_memory_threshold of this PreTranslateSettingsDto.

        Pre-translation threshold percent  # noqa: E501

        :param translation_memory_threshold: The translation_memory_threshold of this PreTranslateSettingsDto.  # noqa: E501
        :type: float
        """

        self._translation_memory_threshold = translation_memory_threshold

    @property
    def auto_propagate_repetitions(self):
        """Gets the auto_propagate_repetitions of this PreTranslateSettingsDto.  # noqa: E501

        Propagate repetitions. Default: false  # noqa: E501

        :return: The auto_propagate_repetitions of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._auto_propagate_repetitions

    @auto_propagate_repetitions.setter
    def auto_propagate_repetitions(self, auto_propagate_repetitions):
        """Sets the auto_propagate_repetitions of this PreTranslateSettingsDto.

        Propagate repetitions. Default: false  # noqa: E501

        :param auto_propagate_repetitions: The auto_propagate_repetitions of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._auto_propagate_repetitions = auto_propagate_repetitions

    @property
    def machine_translation(self):
        """Gets the machine_translation of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate from machine translation. Default: false  # noqa: E501

        :return: The machine_translation of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._machine_translation

    @machine_translation.setter
    def machine_translation(self, machine_translation):
        """Sets the machine_translation of this PreTranslateSettingsDto.

        Pre-translate from machine translation. Default: false  # noqa: E501

        :param machine_translation: The machine_translation of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._machine_translation = machine_translation

    @property
    def non_translatables(self):
        """Gets the non_translatables of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate non-translatables. Default: false  # noqa: E501

        :return: The non_translatables of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._non_translatables

    @non_translatables.setter
    def non_translatables(self, non_translatables):
        """Sets the non_translatables of this PreTranslateSettingsDto.

        Pre-translate non-translatables. Default: false  # noqa: E501

        :param non_translatables: The non_translatables of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._non_translatables = non_translatables

    @property
    def repetitions_as_confirmed(self):
        """Gets the repetitions_as_confirmed of this PreTranslateSettingsDto.  # noqa: E501

        Set segment status to confirmed for: Repetitions. Default: false  # noqa: E501

        :return: The repetitions_as_confirmed of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._repetitions_as_confirmed

    @repetitions_as_confirmed.setter
    def repetitions_as_confirmed(self, repetitions_as_confirmed):
        """Sets the repetitions_as_confirmed of this PreTranslateSettingsDto.

        Set segment status to confirmed for: Repetitions. Default: false  # noqa: E501

        :param repetitions_as_confirmed: The repetitions_as_confirmed of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._repetitions_as_confirmed = repetitions_as_confirmed

    @property
    def matches100_as_translated(self):
        """Gets the matches100_as_translated of this PreTranslateSettingsDto.  # noqa: E501

        Set segment status to confirmed for: 100% translation memory matches. Default: false  # noqa: E501

        :return: The matches100_as_translated of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._matches100_as_translated

    @matches100_as_translated.setter
    def matches100_as_translated(self, matches100_as_translated):
        """Sets the matches100_as_translated of this PreTranslateSettingsDto.

        Set segment status to confirmed for: 100% translation memory matches. Default: false  # noqa: E501

        :param matches100_as_translated: The matches100_as_translated of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._matches100_as_translated = matches100_as_translated

    @property
    def matches101_as_translate(self):
        """Gets the matches101_as_translate of this PreTranslateSettingsDto.  # noqa: E501

        Set segment status to confirmed for: 101% translation memory matches. Default: false  # noqa: E501

        :return: The matches101_as_translate of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._matches101_as_translate

    @matches101_as_translate.setter
    def matches101_as_translate(self, matches101_as_translate):
        """Sets the matches101_as_translate of this PreTranslateSettingsDto.

        Set segment status to confirmed for: 101% translation memory matches. Default: false  # noqa: E501

        :param matches101_as_translate: The matches101_as_translate of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._matches101_as_translate = matches101_as_translate

    @property
    def non_translatables_as_translated(self):
        """Gets the non_translatables_as_translated of this PreTranslateSettingsDto.  # noqa: E501

        Set segment status to confirmed for: 100% non-translatable matches. Default: false  # noqa: E501

        :return: The non_translatables_as_translated of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._non_translatables_as_translated

    @non_translatables_as_translated.setter
    def non_translatables_as_translated(self, non_translatables_as_translated):
        """Sets the non_translatables_as_translated of this PreTranslateSettingsDto.

        Set segment status to confirmed for: 100% non-translatable matches. Default: false  # noqa: E501

        :param non_translatables_as_translated: The non_translatables_as_translated of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._non_translatables_as_translated = non_translatables_as_translated

    @property
    def pre_translate_on_job_creation(self):
        """Gets the pre_translate_on_job_creation of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate & set job to completed: Pre-translate on job creation. Default: false  # noqa: E501

        :return: The pre_translate_on_job_creation of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._pre_translate_on_job_creation

    @pre_translate_on_job_creation.setter
    def pre_translate_on_job_creation(self, pre_translate_on_job_creation):
        """Sets the pre_translate_on_job_creation of this PreTranslateSettingsDto.

        Pre-translate & set job to completed: Pre-translate on job creation. Default: false  # noqa: E501

        :param pre_translate_on_job_creation: The pre_translate_on_job_creation of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._pre_translate_on_job_creation = pre_translate_on_job_creation

    @property
    def set_job_status_completed(self):
        """Gets the set_job_status_completed of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate & set job to completed: Set job to completed once pre-translated. Default: false  # noqa: E501

        :return: The set_job_status_completed of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._set_job_status_completed

    @set_job_status_completed.setter
    def set_job_status_completed(self, set_job_status_completed):
        """Sets the set_job_status_completed of this PreTranslateSettingsDto.

        Pre-translate & set job to completed: Set job to completed once pre-translated. Default: false  # noqa: E501

        :param set_job_status_completed: The set_job_status_completed of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._set_job_status_completed = set_job_status_completed

    @property
    def set_job_status_completed_when_confirmed(self):
        """Gets the set_job_status_completed_when_confirmed of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate & set job to completed when all segments confirmed: Set job to completed once pre-translated and all segments are confirmed. Default: false  # noqa: E501

        :return: The set_job_status_completed_when_confirmed of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._set_job_status_completed_when_confirmed

    @set_job_status_completed_when_confirmed.setter
    def set_job_status_completed_when_confirmed(self, set_job_status_completed_when_confirmed):
        """Sets the set_job_status_completed_when_confirmed of this PreTranslateSettingsDto.

        Pre-translate & set job to completed when all segments confirmed: Set job to completed once pre-translated and all segments are confirmed. Default: false  # noqa: E501

        :param set_job_status_completed_when_confirmed: The set_job_status_completed_when_confirmed of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._set_job_status_completed_when_confirmed = set_job_status_completed_when_confirmed

    @property
    def set_project_status_completed(self):
        """Gets the set_project_status_completed of this PreTranslateSettingsDto.  # noqa: E501

        Pre-translate & set job to completed: Set project to completed once all jobs pre-translated.         Default: false  # noqa: E501

        :return: The set_project_status_completed of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._set_project_status_completed

    @set_project_status_completed.setter
    def set_project_status_completed(self, set_project_status_completed):
        """Sets the set_project_status_completed of this PreTranslateSettingsDto.

        Pre-translate & set job to completed: Set project to completed once all jobs pre-translated.         Default: false  # noqa: E501

        :param set_project_status_completed: The set_project_status_completed of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._set_project_status_completed = set_project_status_completed

    @property
    def lock_non_translatables(self):
        """Gets the lock_non_translatables of this PreTranslateSettingsDto.  # noqa: E501

        Lock 100% non-translatable matches. Default: false  # noqa: E501

        :return: The lock_non_translatables of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._lock_non_translatables

    @lock_non_translatables.setter
    def lock_non_translatables(self, lock_non_translatables):
        """Sets the lock_non_translatables of this PreTranslateSettingsDto.

        Lock 100% non-translatable matches. Default: false  # noqa: E501

        :param lock_non_translatables: The lock_non_translatables of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._lock_non_translatables = lock_non_translatables

    @property
    def lock100(self):
        """Gets the lock100 of this PreTranslateSettingsDto.  # noqa: E501

        Lock 100% translation memory matches. Default: false  # noqa: E501

        :return: The lock100 of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._lock100

    @lock100.setter
    def lock100(self, lock100):
        """Sets the lock100 of this PreTranslateSettingsDto.

        Lock 100% translation memory matches. Default: false  # noqa: E501

        :param lock100: The lock100 of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._lock100 = lock100

    @property
    def lock101(self):
        """Gets the lock101 of this PreTranslateSettingsDto.  # noqa: E501

        Lock 101% translation memory matches. Default: false  # noqa: E501

        :return: The lock101 of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._lock101

    @lock101.setter
    def lock101(self, lock101):
        """Sets the lock101 of this PreTranslateSettingsDto.

        Lock 101% translation memory matches. Default: false  # noqa: E501

        :param lock101: The lock101 of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._lock101 = lock101

    @property
    def non_translatables_in_editors(self):
        """Gets the non_translatables_in_editors of this PreTranslateSettingsDto.  # noqa: E501

        Non translatables enabled in Editors. Default: false  # noqa: E501

        :return: The non_translatables_in_editors of this PreTranslateSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._non_translatables_in_editors

    @non_translatables_in_editors.setter
    def non_translatables_in_editors(self, non_translatables_in_editors):
        """Sets the non_translatables_in_editors of this PreTranslateSettingsDto.

        Non translatables enabled in Editors. Default: false  # noqa: E501

        :param non_translatables_in_editors: The non_translatables_in_editors of this PreTranslateSettingsDto.  # noqa: E501
        :type: bool
        """

        self._non_translatables_in_editors = non_translatables_in_editors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreTranslateSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreTranslateSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
