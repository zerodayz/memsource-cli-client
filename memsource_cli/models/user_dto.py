# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.discount_scheme_reference import DiscountSchemeReference  # noqa: F401,E501
from memsource_cli.models.price_list_reference import PriceListReference  # noqa: F401,E501
from memsource_cli.models.user_reference import UserReference  # noqa: F401,E501


class UserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'date_created': 'datetime',
        'date_deleted': 'datetime',
        'created_by': 'UserReference',
        'role': 'str',
        'timezone': 'str',
        'note': 'str',
        'terminologist': 'bool',
        'source_langs': 'list[str]',
        'target_langs': 'list[str]',
        'active': 'bool',
        'price_list': 'PriceListReference',
        'net_rate_scheme': 'DiscountSchemeReference'
    }

    attribute_map = {
        'id': 'id',
        'user_name': 'userName',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'email': 'email',
        'date_created': 'dateCreated',
        'date_deleted': 'dateDeleted',
        'created_by': 'createdBy',
        'role': 'role',
        'timezone': 'timezone',
        'note': 'note',
        'terminologist': 'terminologist',
        'source_langs': 'sourceLangs',
        'target_langs': 'targetLangs',
        'active': 'active',
        'price_list': 'priceList',
        'net_rate_scheme': 'netRateScheme'
    }

    def __init__(self, id=None, user_name=None, first_name=None, last_name=None, email=None, date_created=None, date_deleted=None, created_by=None, role=None, timezone=None, note=None, terminologist=None, source_langs=None, target_langs=None, active=None, price_list=None, net_rate_scheme=None):  # noqa: E501
        """UserDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._date_created = None
        self._date_deleted = None
        self._created_by = None
        self._role = None
        self._timezone = None
        self._note = None
        self._terminologist = None
        self._source_langs = None
        self._target_langs = None
        self._active = None
        self._price_list = None
        self._net_rate_scheme = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if date_created is not None:
            self.date_created = date_created
        if date_deleted is not None:
            self.date_deleted = date_deleted
        if created_by is not None:
            self.created_by = created_by
        if role is not None:
            self.role = role
        if timezone is not None:
            self.timezone = timezone
        if note is not None:
            self.note = note
        if terminologist is not None:
            self.terminologist = terminologist
        if source_langs is not None:
            self.source_langs = source_langs
        if target_langs is not None:
            self.target_langs = target_langs
        if active is not None:
            self.active = active
        if price_list is not None:
            self.price_list = price_list
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme

    @property
    def id(self):
        """Gets the id of this UserDto.  # noqa: E501


        :return: The id of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDto.


        :param id: The id of this UserDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this UserDto.  # noqa: E501


        :return: The user_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserDto.


        :param user_name: The user_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this UserDto.  # noqa: E501


        :return: The first_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDto.


        :param first_name: The first_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserDto.  # noqa: E501


        :return: The last_name of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDto.


        :param last_name: The last_name of this UserDto.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserDto.  # noqa: E501


        :return: The email of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDto.


        :param email: The email of this UserDto.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def date_created(self):
        """Gets the date_created of this UserDto.  # noqa: E501


        :return: The date_created of this UserDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this UserDto.


        :param date_created: The date_created of this UserDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_deleted(self):
        """Gets the date_deleted of this UserDto.  # noqa: E501


        :return: The date_deleted of this UserDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_deleted

    @date_deleted.setter
    def date_deleted(self, date_deleted):
        """Sets the date_deleted of this UserDto.


        :param date_deleted: The date_deleted of this UserDto.  # noqa: E501
        :type: datetime
        """

        self._date_deleted = date_deleted

    @property
    def created_by(self):
        """Gets the created_by of this UserDto.  # noqa: E501


        :return: The created_by of this UserDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UserDto.


        :param created_by: The created_by of this UserDto.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def role(self):
        """Gets the role of this UserDto.  # noqa: E501


        :return: The role of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserDto.


        :param role: The role of this UserDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["SYS_ADMIN", "SYS_ADMIN_READ", "ADMIN", "PROJECT_MANAGER", "LINGUIST", "GUEST", "SUBMITTER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def timezone(self):
        """Gets the timezone of this UserDto.  # noqa: E501


        :return: The timezone of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this UserDto.


        :param timezone: The timezone of this UserDto.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def note(self):
        """Gets the note of this UserDto.  # noqa: E501


        :return: The note of this UserDto.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this UserDto.


        :param note: The note of this UserDto.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def terminologist(self):
        """Gets the terminologist of this UserDto.  # noqa: E501


        :return: The terminologist of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._terminologist

    @terminologist.setter
    def terminologist(self, terminologist):
        """Sets the terminologist of this UserDto.


        :param terminologist: The terminologist of this UserDto.  # noqa: E501
        :type: bool
        """

        self._terminologist = terminologist

    @property
    def source_langs(self):
        """Gets the source_langs of this UserDto.  # noqa: E501


        :return: The source_langs of this UserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_langs

    @source_langs.setter
    def source_langs(self, source_langs):
        """Sets the source_langs of this UserDto.


        :param source_langs: The source_langs of this UserDto.  # noqa: E501
        :type: list[str]
        """

        self._source_langs = source_langs

    @property
    def target_langs(self):
        """Gets the target_langs of this UserDto.  # noqa: E501


        :return: The target_langs of this UserDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this UserDto.


        :param target_langs: The target_langs of this UserDto.  # noqa: E501
        :type: list[str]
        """

        self._target_langs = target_langs

    @property
    def active(self):
        """Gets the active of this UserDto.  # noqa: E501


        :return: The active of this UserDto.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UserDto.


        :param active: The active of this UserDto.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def price_list(self):
        """Gets the price_list of this UserDto.  # noqa: E501


        :return: The price_list of this UserDto.  # noqa: E501
        :rtype: PriceListReference
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """Sets the price_list of this UserDto.


        :param price_list: The price_list of this UserDto.  # noqa: E501
        :type: PriceListReference
        """

        self._price_list = price_list

    @property
    def net_rate_scheme(self):
        """Gets the net_rate_scheme of this UserDto.  # noqa: E501


        :return: The net_rate_scheme of this UserDto.  # noqa: E501
        :rtype: DiscountSchemeReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this UserDto.


        :param net_rate_scheme: The net_rate_scheme of this UserDto.  # noqa: E501
        :type: DiscountSchemeReference
        """

        self._net_rate_scheme = net_rate_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
