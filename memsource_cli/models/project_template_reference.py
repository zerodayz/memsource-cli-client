# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectTemplateReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_name': 'str',
        'source_lang': 'str',
        'target_langs': 'list[str]',
        'id': 'str'
    }

    attribute_map = {
        'template_name': 'templateName',
        'source_lang': 'sourceLang',
        'target_langs': 'targetLangs',
        'id': 'id'
    }

    def __init__(self, template_name=None, source_lang=None, target_langs=None, id=None):  # noqa: E501
        """ProjectTemplateReference - a model defined in Swagger"""  # noqa: E501

        self._template_name = None
        self._source_lang = None
        self._target_langs = None
        self._id = None
        self.discriminator = None

        if template_name is not None:
            self.template_name = template_name
        if source_lang is not None:
            self.source_lang = source_lang
        if target_langs is not None:
            self.target_langs = target_langs
        if id is not None:
            self.id = id

    @property
    def template_name(self):
        """Gets the template_name of this ProjectTemplateReference.  # noqa: E501


        :return: The template_name of this ProjectTemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this ProjectTemplateReference.


        :param template_name: The template_name of this ProjectTemplateReference.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def source_lang(self):
        """Gets the source_lang of this ProjectTemplateReference.  # noqa: E501


        :return: The source_lang of this ProjectTemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._source_lang

    @source_lang.setter
    def source_lang(self, source_lang):
        """Sets the source_lang of this ProjectTemplateReference.


        :param source_lang: The source_lang of this ProjectTemplateReference.  # noqa: E501
        :type: str
        """

        self._source_lang = source_lang

    @property
    def target_langs(self):
        """Gets the target_langs of this ProjectTemplateReference.  # noqa: E501


        :return: The target_langs of this ProjectTemplateReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_langs

    @target_langs.setter
    def target_langs(self, target_langs):
        """Sets the target_langs of this ProjectTemplateReference.


        :param target_langs: The target_langs of this ProjectTemplateReference.  # noqa: E501
        :type: list[str]
        """

        self._target_langs = target_langs

    @property
    def id(self):
        """Gets the id of this ProjectTemplateReference.  # noqa: E501


        :return: The id of this ProjectTemplateReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectTemplateReference.


        :param id: The id of this ProjectTemplateReference.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectTemplateReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectTemplateReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
