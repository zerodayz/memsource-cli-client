# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501


class LQAReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_category_id': 'int',
        'severity_id': 'int',
        'user': 'IdReference'
    }

    attribute_map = {
        'error_category_id': 'errorCategoryId',
        'severity_id': 'severityId',
        'user': 'user'
    }

    def __init__(self, error_category_id=None, severity_id=None, user=None):  # noqa: E501
        """LQAReference - a model defined in Swagger"""  # noqa: E501

        self._error_category_id = None
        self._severity_id = None
        self._user = None
        self.discriminator = None

        self.error_category_id = error_category_id
        self.severity_id = severity_id
        if user is not None:
            self.user = user

    @property
    def error_category_id(self):
        """Gets the error_category_id of this LQAReference.  # noqa: E501


        :return: The error_category_id of this LQAReference.  # noqa: E501
        :rtype: int
        """
        return self._error_category_id

    @error_category_id.setter
    def error_category_id(self, error_category_id):
        """Sets the error_category_id of this LQAReference.


        :param error_category_id: The error_category_id of this LQAReference.  # noqa: E501
        :type: int
        """
        if error_category_id is None:
            raise ValueError("Invalid value for `error_category_id`, must not be `None`")  # noqa: E501
        if error_category_id is not None and error_category_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `error_category_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._error_category_id = error_category_id

    @property
    def severity_id(self):
        """Gets the severity_id of this LQAReference.  # noqa: E501


        :return: The severity_id of this LQAReference.  # noqa: E501
        :rtype: int
        """
        return self._severity_id

    @severity_id.setter
    def severity_id(self, severity_id):
        """Sets the severity_id of this LQAReference.


        :param severity_id: The severity_id of this LQAReference.  # noqa: E501
        :type: int
        """
        if severity_id is None:
            raise ValueError("Invalid value for `severity_id`, must not be `None`")  # noqa: E501
        if severity_id is not None and severity_id < 1:  # noqa: E501
            raise ValueError("Invalid value for `severity_id`, must be a value greater than or equal to `1`")  # noqa: E501

        self._severity_id = severity_id

    @property
    def user(self):
        """Gets the user of this LQAReference.  # noqa: E501


        :return: The user of this LQAReference.  # noqa: E501
        :rtype: IdReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LQAReference.


        :param user: The user of this LQAReference.  # noqa: E501
        :type: IdReference
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LQAReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LQAReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
