# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TermCreateByJobDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'case_sensitive': 'bool',
        'exact_match': 'bool',
        'forbidden': 'bool',
        'preferred': 'bool',
        'usage': 'str',
        'note': 'str',
        'short_translation': 'str',
        'term_type': 'str',
        'part_of_speech': 'str',
        'gender': 'str',
        'number': 'str'
    }

    attribute_map = {
        'text': 'text',
        'case_sensitive': 'caseSensitive',
        'exact_match': 'exactMatch',
        'forbidden': 'forbidden',
        'preferred': 'preferred',
        'usage': 'usage',
        'note': 'note',
        'short_translation': 'shortTranslation',
        'term_type': 'termType',
        'part_of_speech': 'partOfSpeech',
        'gender': 'gender',
        'number': 'number'
    }

    def __init__(self, text=None, case_sensitive=None, exact_match=None, forbidden=None, preferred=None, usage=None, note=None, short_translation=None, term_type=None, part_of_speech=None, gender=None, number=None):  # noqa: E501
        """TermCreateByJobDto - a model defined in Swagger"""  # noqa: E501

        self._text = None
        self._case_sensitive = None
        self._exact_match = None
        self._forbidden = None
        self._preferred = None
        self._usage = None
        self._note = None
        self._short_translation = None
        self._term_type = None
        self._part_of_speech = None
        self._gender = None
        self._number = None
        self.discriminator = None

        if text is not None:
            self.text = text
        if case_sensitive is not None:
            self.case_sensitive = case_sensitive
        if exact_match is not None:
            self.exact_match = exact_match
        if forbidden is not None:
            self.forbidden = forbidden
        if preferred is not None:
            self.preferred = preferred
        if usage is not None:
            self.usage = usage
        if note is not None:
            self.note = note
        if short_translation is not None:
            self.short_translation = short_translation
        if term_type is not None:
            self.term_type = term_type
        if part_of_speech is not None:
            self.part_of_speech = part_of_speech
        if gender is not None:
            self.gender = gender
        if number is not None:
            self.number = number

    @property
    def text(self):
        """Gets the text of this TermCreateByJobDto.  # noqa: E501


        :return: The text of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TermCreateByJobDto.


        :param text: The text of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def case_sensitive(self):
        """Gets the case_sensitive of this TermCreateByJobDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The case_sensitive of this TermCreateByJobDto.  # noqa: E501
        :rtype: bool
        """
        return self._case_sensitive

    @case_sensitive.setter
    def case_sensitive(self, case_sensitive):
        """Sets the case_sensitive of this TermCreateByJobDto.

        Default: false  # noqa: E501

        :param case_sensitive: The case_sensitive of this TermCreateByJobDto.  # noqa: E501
        :type: bool
        """

        self._case_sensitive = case_sensitive

    @property
    def exact_match(self):
        """Gets the exact_match of this TermCreateByJobDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The exact_match of this TermCreateByJobDto.  # noqa: E501
        :rtype: bool
        """
        return self._exact_match

    @exact_match.setter
    def exact_match(self, exact_match):
        """Sets the exact_match of this TermCreateByJobDto.

        Default: false  # noqa: E501

        :param exact_match: The exact_match of this TermCreateByJobDto.  # noqa: E501
        :type: bool
        """

        self._exact_match = exact_match

    @property
    def forbidden(self):
        """Gets the forbidden of this TermCreateByJobDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The forbidden of this TermCreateByJobDto.  # noqa: E501
        :rtype: bool
        """
        return self._forbidden

    @forbidden.setter
    def forbidden(self, forbidden):
        """Sets the forbidden of this TermCreateByJobDto.

        Default: false  # noqa: E501

        :param forbidden: The forbidden of this TermCreateByJobDto.  # noqa: E501
        :type: bool
        """

        self._forbidden = forbidden

    @property
    def preferred(self):
        """Gets the preferred of this TermCreateByJobDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The preferred of this TermCreateByJobDto.  # noqa: E501
        :rtype: bool
        """
        return self._preferred

    @preferred.setter
    def preferred(self, preferred):
        """Sets the preferred of this TermCreateByJobDto.

        Default: false  # noqa: E501

        :param preferred: The preferred of this TermCreateByJobDto.  # noqa: E501
        :type: bool
        """

        self._preferred = preferred

    @property
    def usage(self):
        """Gets the usage of this TermCreateByJobDto.  # noqa: E501


        :return: The usage of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this TermCreateByJobDto.


        :param usage: The usage of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def note(self):
        """Gets the note of this TermCreateByJobDto.  # noqa: E501


        :return: The note of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this TermCreateByJobDto.


        :param note: The note of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def short_translation(self):
        """Gets the short_translation of this TermCreateByJobDto.  # noqa: E501


        :return: The short_translation of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._short_translation

    @short_translation.setter
    def short_translation(self, short_translation):
        """Sets the short_translation of this TermCreateByJobDto.


        :param short_translation: The short_translation of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """

        self._short_translation = short_translation

    @property
    def term_type(self):
        """Gets the term_type of this TermCreateByJobDto.  # noqa: E501


        :return: The term_type of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this TermCreateByJobDto.


        :param term_type: The term_type of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["FULL_FORM", "SHORT_FORM", "ACRONYM", "ABBREVIATION", "PHRASE", "VARIANT"]  # noqa: E501
        if term_type not in allowed_values:
            raise ValueError(
                "Invalid value for `term_type` ({0}), must be one of {1}"  # noqa: E501
                .format(term_type, allowed_values)
            )

        self._term_type = term_type

    @property
    def part_of_speech(self):
        """Gets the part_of_speech of this TermCreateByJobDto.  # noqa: E501


        :return: The part_of_speech of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._part_of_speech

    @part_of_speech.setter
    def part_of_speech(self, part_of_speech):
        """Sets the part_of_speech of this TermCreateByJobDto.


        :param part_of_speech: The part_of_speech of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADJECTIVE", "NOUN", "VERB", "ADVERB"]  # noqa: E501
        if part_of_speech not in allowed_values:
            raise ValueError(
                "Invalid value for `part_of_speech` ({0}), must be one of {1}"  # noqa: E501
                .format(part_of_speech, allowed_values)
            )

        self._part_of_speech = part_of_speech

    @property
    def gender(self):
        """Gets the gender of this TermCreateByJobDto.  # noqa: E501


        :return: The gender of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this TermCreateByJobDto.


        :param gender: The gender of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["MASCULINE", "FEMININE", "NEUTRAL"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def number(self):
        """Gets the number of this TermCreateByJobDto.  # noqa: E501


        :return: The number of this TermCreateByJobDto.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this TermCreateByJobDto.


        :param number: The number of this TermCreateByJobDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["SINGULAR", "PLURAL", "UNCOUNTABLE"]  # noqa: E501
        if number not in allowed_values:
            raise ValueError(
                "Invalid value for `number` ({0}), must be one of {1}"  # noqa: E501
                .format(number, allowed_values)
            )

        self._number = number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TermCreateByJobDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermCreateByJobDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
