# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CountsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'segments': 'float',
        'words': 'float',
        'characters': 'float',
        'normalized_pages': 'float',
        'percent': 'float'
    }

    attribute_map = {
        'segments': 'segments',
        'words': 'words',
        'characters': 'characters',
        'normalized_pages': 'normalizedPages',
        'percent': 'percent'
    }

    def __init__(self, segments=None, words=None, characters=None, normalized_pages=None, percent=None):  # noqa: E501
        """CountsDto - a model defined in Swagger"""  # noqa: E501

        self._segments = None
        self._words = None
        self._characters = None
        self._normalized_pages = None
        self._percent = None
        self.discriminator = None

        if segments is not None:
            self.segments = segments
        if words is not None:
            self.words = words
        if characters is not None:
            self.characters = characters
        if normalized_pages is not None:
            self.normalized_pages = normalized_pages
        if percent is not None:
            self.percent = percent

    @property
    def segments(self):
        """Gets the segments of this CountsDto.  # noqa: E501


        :return: The segments of this CountsDto.  # noqa: E501
        :rtype: float
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this CountsDto.


        :param segments: The segments of this CountsDto.  # noqa: E501
        :type: float
        """

        self._segments = segments

    @property
    def words(self):
        """Gets the words of this CountsDto.  # noqa: E501


        :return: The words of this CountsDto.  # noqa: E501
        :rtype: float
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this CountsDto.


        :param words: The words of this CountsDto.  # noqa: E501
        :type: float
        """

        self._words = words

    @property
    def characters(self):
        """Gets the characters of this CountsDto.  # noqa: E501


        :return: The characters of this CountsDto.  # noqa: E501
        :rtype: float
        """
        return self._characters

    @characters.setter
    def characters(self, characters):
        """Sets the characters of this CountsDto.


        :param characters: The characters of this CountsDto.  # noqa: E501
        :type: float
        """

        self._characters = characters

    @property
    def normalized_pages(self):
        """Gets the normalized_pages of this CountsDto.  # noqa: E501


        :return: The normalized_pages of this CountsDto.  # noqa: E501
        :rtype: float
        """
        return self._normalized_pages

    @normalized_pages.setter
    def normalized_pages(self, normalized_pages):
        """Sets the normalized_pages of this CountsDto.


        :param normalized_pages: The normalized_pages of this CountsDto.  # noqa: E501
        :type: float
        """

        self._normalized_pages = normalized_pages

    @property
    def percent(self):
        """Gets the percent of this CountsDto.  # noqa: E501


        :return: The percent of this CountsDto.  # noqa: E501
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this CountsDto.


        :param percent: The percent of this CountsDto.  # noqa: E501
        :type: float
        """

        self._percent = percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CountsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CountsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
