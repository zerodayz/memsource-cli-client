# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CsvSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delimiter': 'str',
        'delimiter_type': 'str',
        'html_sub_filter': 'bool',
        'tag_regexp': 'str',
        'import_columns': 'str',
        'context_note_columns': 'str',
        'context_key_column': 'str',
        'max_len_column': 'str',
        'import_rows': 'str'
    }

    attribute_map = {
        'delimiter': 'delimiter',
        'delimiter_type': 'delimiterType',
        'html_sub_filter': 'htmlSubFilter',
        'tag_regexp': 'tagRegexp',
        'import_columns': 'importColumns',
        'context_note_columns': 'contextNoteColumns',
        'context_key_column': 'contextKeyColumn',
        'max_len_column': 'maxLenColumn',
        'import_rows': 'importRows'
    }

    def __init__(self, delimiter=None, delimiter_type=None, html_sub_filter=None, tag_regexp=None, import_columns=None, context_note_columns=None, context_key_column=None, max_len_column=None, import_rows=None):  # noqa: E501
        """CsvSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._delimiter = None
        self._delimiter_type = None
        self._html_sub_filter = None
        self._tag_regexp = None
        self._import_columns = None
        self._context_note_columns = None
        self._context_key_column = None
        self._max_len_column = None
        self._import_rows = None
        self.discriminator = None

        if delimiter is not None:
            self.delimiter = delimiter
        if delimiter_type is not None:
            self.delimiter_type = delimiter_type
        if html_sub_filter is not None:
            self.html_sub_filter = html_sub_filter
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if import_columns is not None:
            self.import_columns = import_columns
        if context_note_columns is not None:
            self.context_note_columns = context_note_columns
        if context_key_column is not None:
            self.context_key_column = context_key_column
        if max_len_column is not None:
            self.max_len_column = max_len_column
        if import_rows is not None:
            self.import_rows = import_rows

    @property
    def delimiter(self):
        """Gets the delimiter of this CsvSettingsDto.  # noqa: E501

        Default: ,  # noqa: E501

        :return: The delimiter of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._delimiter

    @delimiter.setter
    def delimiter(self, delimiter):
        """Sets the delimiter of this CsvSettingsDto.

        Default: ,  # noqa: E501

        :param delimiter: The delimiter of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._delimiter = delimiter

    @property
    def delimiter_type(self):
        """Gets the delimiter_type of this CsvSettingsDto.  # noqa: E501

        Default: COMMA  # noqa: E501

        :return: The delimiter_type of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._delimiter_type

    @delimiter_type.setter
    def delimiter_type(self, delimiter_type):
        """Sets the delimiter_type of this CsvSettingsDto.

        Default: COMMA  # noqa: E501

        :param delimiter_type: The delimiter_type of this CsvSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["TAB", "COMMA", "SEMICOLON", "OTHER"]  # noqa: E501
        if delimiter_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delimiter_type` ({0}), must be one of {1}"  # noqa: E501
                .format(delimiter_type, allowed_values)
            )

        self._delimiter_type = delimiter_type

    @property
    def html_sub_filter(self):
        """Gets the html_sub_filter of this CsvSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The html_sub_filter of this CsvSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_sub_filter

    @html_sub_filter.setter
    def html_sub_filter(self, html_sub_filter):
        """Sets the html_sub_filter of this CsvSettingsDto.

        Default: false  # noqa: E501

        :param html_sub_filter: The html_sub_filter of this CsvSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_sub_filter = html_sub_filter

    @property
    def tag_regexp(self):
        """Gets the tag_regexp of this CsvSettingsDto.  # noqa: E501


        :return: The tag_regexp of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this CsvSettingsDto.


        :param tag_regexp: The tag_regexp of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def import_columns(self):
        """Gets the import_columns of this CsvSettingsDto.  # noqa: E501


        :return: The import_columns of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_columns

    @import_columns.setter
    def import_columns(self, import_columns):
        """Sets the import_columns of this CsvSettingsDto.


        :param import_columns: The import_columns of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_columns = import_columns

    @property
    def context_note_columns(self):
        """Gets the context_note_columns of this CsvSettingsDto.  # noqa: E501


        :return: The context_note_columns of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_note_columns

    @context_note_columns.setter
    def context_note_columns(self, context_note_columns):
        """Sets the context_note_columns of this CsvSettingsDto.


        :param context_note_columns: The context_note_columns of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_note_columns = context_note_columns

    @property
    def context_key_column(self):
        """Gets the context_key_column of this CsvSettingsDto.  # noqa: E501


        :return: The context_key_column of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_column

    @context_key_column.setter
    def context_key_column(self, context_key_column):
        """Sets the context_key_column of this CsvSettingsDto.


        :param context_key_column: The context_key_column of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_column = context_key_column

    @property
    def max_len_column(self):
        """Gets the max_len_column of this CsvSettingsDto.  # noqa: E501


        :return: The max_len_column of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._max_len_column

    @max_len_column.setter
    def max_len_column(self, max_len_column):
        """Sets the max_len_column of this CsvSettingsDto.


        :param max_len_column: The max_len_column of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._max_len_column = max_len_column

    @property
    def import_rows(self):
        """Gets the import_rows of this CsvSettingsDto.  # noqa: E501


        :return: The import_rows of this CsvSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._import_rows

    @import_rows.setter
    def import_rows(self, import_rows):
        """Sets the import_rows of this CsvSettingsDto.


        :param import_rows: The import_rows of this CsvSettingsDto.  # noqa: E501
        :type: str
        """

        self._import_rows = import_rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsvSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsvSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
