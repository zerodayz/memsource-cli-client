# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.term_base_dto import TermBaseDto  # noqa: F401,E501
from memsource_cli.models.term_dto import TermDto  # noqa: F401,E501


class SearchResponseTbDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'term_base': 'TermBaseDto',
        'concept_id': 'str',
        'source_term': 'TermDto',
        'translation_terms': 'list[TermDto]'
    }

    attribute_map = {
        'term_base': 'termBase',
        'concept_id': 'conceptId',
        'source_term': 'sourceTerm',
        'translation_terms': 'translationTerms'
    }

    def __init__(self, term_base=None, concept_id=None, source_term=None, translation_terms=None):  # noqa: E501
        """SearchResponseTbDto - a model defined in Swagger"""  # noqa: E501

        self._term_base = None
        self._concept_id = None
        self._source_term = None
        self._translation_terms = None
        self.discriminator = None

        if term_base is not None:
            self.term_base = term_base
        if concept_id is not None:
            self.concept_id = concept_id
        if source_term is not None:
            self.source_term = source_term
        if translation_terms is not None:
            self.translation_terms = translation_terms

    @property
    def term_base(self):
        """Gets the term_base of this SearchResponseTbDto.  # noqa: E501


        :return: The term_base of this SearchResponseTbDto.  # noqa: E501
        :rtype: TermBaseDto
        """
        return self._term_base

    @term_base.setter
    def term_base(self, term_base):
        """Sets the term_base of this SearchResponseTbDto.


        :param term_base: The term_base of this SearchResponseTbDto.  # noqa: E501
        :type: TermBaseDto
        """

        self._term_base = term_base

    @property
    def concept_id(self):
        """Gets the concept_id of this SearchResponseTbDto.  # noqa: E501


        :return: The concept_id of this SearchResponseTbDto.  # noqa: E501
        :rtype: str
        """
        return self._concept_id

    @concept_id.setter
    def concept_id(self, concept_id):
        """Sets the concept_id of this SearchResponseTbDto.


        :param concept_id: The concept_id of this SearchResponseTbDto.  # noqa: E501
        :type: str
        """

        self._concept_id = concept_id

    @property
    def source_term(self):
        """Gets the source_term of this SearchResponseTbDto.  # noqa: E501


        :return: The source_term of this SearchResponseTbDto.  # noqa: E501
        :rtype: TermDto
        """
        return self._source_term

    @source_term.setter
    def source_term(self, source_term):
        """Sets the source_term of this SearchResponseTbDto.


        :param source_term: The source_term of this SearchResponseTbDto.  # noqa: E501
        :type: TermDto
        """

        self._source_term = source_term

    @property
    def translation_terms(self):
        """Gets the translation_terms of this SearchResponseTbDto.  # noqa: E501


        :return: The translation_terms of this SearchResponseTbDto.  # noqa: E501
        :rtype: list[TermDto]
        """
        return self._translation_terms

    @translation_terms.setter
    def translation_terms(self, translation_terms):
        """Sets the translation_terms of this SearchResponseTbDto.


        :param translation_terms: The translation_terms of this SearchResponseTbDto.  # noqa: E501
        :type: list[TermDto]
        """

        self._translation_terms = translation_terms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResponseTbDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResponseTbDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
