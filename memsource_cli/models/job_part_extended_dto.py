# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.continuous_job_info_dto import ContinuousJobInfoDto  # noqa: F401,E501
from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501
from memsource_cli.models.project_reference import ProjectReference  # noqa: F401,E501
from memsource_cli.models.project_workflow_step_reference import ProjectWorkflowStepReference  # noqa: F401,E501
from memsource_cli.models.provider_reference import ProviderReference  # noqa: F401,E501


class JobPartExtendedDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uid': 'str',
        'status': 'str',
        'providers': 'list[ProviderReference]',
        'source_lang': 'str',
        'target_lang': 'str',
        'workflow_level': 'int',
        'workflow_step': 'ProjectWorkflowStepReference',
        'filename': 'str',
        'date_due': 'datetime',
        'words_count': 'int',
        'begin_index': 'int',
        'end_index': 'int',
        'is_parent_job_split': 'bool',
        'date_created': 'datetime',
        'project': 'ProjectReference',
        'last_workflow_level': 'int',
        'work_unit': 'IdReference',
        'imported': 'bool',
        'continuous': 'bool',
        'continuous_job_info': 'ContinuousJobInfoDto',
        'original_file_directory': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'status': 'status',
        'providers': 'providers',
        'source_lang': 'sourceLang',
        'target_lang': 'targetLang',
        'workflow_level': 'workflowLevel',
        'workflow_step': 'workflowStep',
        'filename': 'filename',
        'date_due': 'dateDue',
        'words_count': 'wordsCount',
        'begin_index': 'beginIndex',
        'end_index': 'endIndex',
        'is_parent_job_split': 'isParentJobSplit',
        'date_created': 'dateCreated',
        'project': 'project',
        'last_workflow_level': 'lastWorkflowLevel',
        'work_unit': 'workUnit',
        'imported': 'imported',
        'continuous': 'continuous',
        'continuous_job_info': 'continuousJobInfo',
        'original_file_directory': 'originalFileDirectory'
    }

    def __init__(self, uid=None, status=None, providers=None, source_lang=None, target_lang=None, workflow_level=None, workflow_step=None, filename=None, date_due=None, words_count=None, begin_index=None, end_index=None, is_parent_job_split=None, date_created=None, project=None, last_workflow_level=None, work_unit=None, imported=None, continuous=None, continuous_job_info=None, original_file_directory=None):  # noqa: E501
        """JobPartExtendedDto - a model defined in Swagger"""  # noqa: E501

        self._uid = None
        self._status = None
        self._providers = None
        self._source_lang = None
        self._target_lang = None
        self._workflow_level = None
        self._workflow_step = None
        self._filename = None
        self._date_due = None
        self._words_count = None
        self._begin_index = None
        self._end_index = None
        self._is_parent_job_split = None
        self._date_created = None
        self._project = None
        self._last_workflow_level = None
        self._work_unit = None
        self._imported = None
        self._continuous = None
        self._continuous_job_info = None
        self._original_file_directory = None
        self.discriminator = None

        if uid is not None:
            self.uid = uid
        if status is not None:
            self.status = status
        if providers is not None:
            self.providers = providers
        if source_lang is not None:
            self.source_lang = source_lang
        if target_lang is not None:
            self.target_lang = target_lang
        if workflow_level is not None:
            self.workflow_level = workflow_level
        if workflow_step is not None:
            self.workflow_step = workflow_step
        if filename is not None:
            self.filename = filename
        if date_due is not None:
            self.date_due = date_due
        if words_count is not None:
            self.words_count = words_count
        if begin_index is not None:
            self.begin_index = begin_index
        if end_index is not None:
            self.end_index = end_index
        if is_parent_job_split is not None:
            self.is_parent_job_split = is_parent_job_split
        if date_created is not None:
            self.date_created = date_created
        if project is not None:
            self.project = project
        if last_workflow_level is not None:
            self.last_workflow_level = last_workflow_level
        if work_unit is not None:
            self.work_unit = work_unit
        if imported is not None:
            self.imported = imported
        if continuous is not None:
            self.continuous = continuous
        if continuous_job_info is not None:
            self.continuous_job_info = continuous_job_info
        if original_file_directory is not None:
            self.original_file_directory = original_file_directory

    @property
    def uid(self):
        """Gets the uid of this JobPartExtendedDto.  # noqa: E501


        :return: The uid of this JobPartExtendedDto.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this JobPartExtendedDto.


        :param uid: The uid of this JobPartExtendedDto.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def status(self):
        """Gets the status of this JobPartExtendedDto.  # noqa: E501


        :return: The status of this JobPartExtendedDto.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobPartExtendedDto.


        :param status: The status of this JobPartExtendedDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["NEW", "ACCEPTED", "DECLINED", "REJECTED", "DELIVERED", "EMAILED", "COMPLETED", "CANCELLED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def providers(self):
        """Gets the providers of this JobPartExtendedDto.  # noqa: E501


        :return: The providers of this JobPartExtendedDto.  # noqa: E501
        :rtype: list[ProviderReference]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this JobPartExtendedDto.


        :param providers: The providers of this JobPartExtendedDto.  # noqa: E501
        :type: list[ProviderReference]
        """

        self._providers = providers

    @property
    def source_lang(self):
        """Gets the source_lang of this JobPartExtendedDto.  # noqa: E501


        :return: The source_lang of this JobPartExtendedDto.  # noqa: E501
        :rtype: str
        """
        return self._source_lang

    @source_lang.setter
    def source_lang(self, source_lang):
        """Sets the source_lang of this JobPartExtendedDto.


        :param source_lang: The source_lang of this JobPartExtendedDto.  # noqa: E501
        :type: str
        """

        self._source_lang = source_lang

    @property
    def target_lang(self):
        """Gets the target_lang of this JobPartExtendedDto.  # noqa: E501


        :return: The target_lang of this JobPartExtendedDto.  # noqa: E501
        :rtype: str
        """
        return self._target_lang

    @target_lang.setter
    def target_lang(self, target_lang):
        """Sets the target_lang of this JobPartExtendedDto.


        :param target_lang: The target_lang of this JobPartExtendedDto.  # noqa: E501
        :type: str
        """

        self._target_lang = target_lang

    @property
    def workflow_level(self):
        """Gets the workflow_level of this JobPartExtendedDto.  # noqa: E501


        :return: The workflow_level of this JobPartExtendedDto.  # noqa: E501
        :rtype: int
        """
        return self._workflow_level

    @workflow_level.setter
    def workflow_level(self, workflow_level):
        """Sets the workflow_level of this JobPartExtendedDto.


        :param workflow_level: The workflow_level of this JobPartExtendedDto.  # noqa: E501
        :type: int
        """

        self._workflow_level = workflow_level

    @property
    def workflow_step(self):
        """Gets the workflow_step of this JobPartExtendedDto.  # noqa: E501


        :return: The workflow_step of this JobPartExtendedDto.  # noqa: E501
        :rtype: ProjectWorkflowStepReference
        """
        return self._workflow_step

    @workflow_step.setter
    def workflow_step(self, workflow_step):
        """Sets the workflow_step of this JobPartExtendedDto.


        :param workflow_step: The workflow_step of this JobPartExtendedDto.  # noqa: E501
        :type: ProjectWorkflowStepReference
        """

        self._workflow_step = workflow_step

    @property
    def filename(self):
        """Gets the filename of this JobPartExtendedDto.  # noqa: E501


        :return: The filename of this JobPartExtendedDto.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this JobPartExtendedDto.


        :param filename: The filename of this JobPartExtendedDto.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def date_due(self):
        """Gets the date_due of this JobPartExtendedDto.  # noqa: E501


        :return: The date_due of this JobPartExtendedDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_due

    @date_due.setter
    def date_due(self, date_due):
        """Sets the date_due of this JobPartExtendedDto.


        :param date_due: The date_due of this JobPartExtendedDto.  # noqa: E501
        :type: datetime
        """

        self._date_due = date_due

    @property
    def words_count(self):
        """Gets the words_count of this JobPartExtendedDto.  # noqa: E501


        :return: The words_count of this JobPartExtendedDto.  # noqa: E501
        :rtype: int
        """
        return self._words_count

    @words_count.setter
    def words_count(self, words_count):
        """Sets the words_count of this JobPartExtendedDto.


        :param words_count: The words_count of this JobPartExtendedDto.  # noqa: E501
        :type: int
        """

        self._words_count = words_count

    @property
    def begin_index(self):
        """Gets the begin_index of this JobPartExtendedDto.  # noqa: E501


        :return: The begin_index of this JobPartExtendedDto.  # noqa: E501
        :rtype: int
        """
        return self._begin_index

    @begin_index.setter
    def begin_index(self, begin_index):
        """Sets the begin_index of this JobPartExtendedDto.


        :param begin_index: The begin_index of this JobPartExtendedDto.  # noqa: E501
        :type: int
        """

        self._begin_index = begin_index

    @property
    def end_index(self):
        """Gets the end_index of this JobPartExtendedDto.  # noqa: E501


        :return: The end_index of this JobPartExtendedDto.  # noqa: E501
        :rtype: int
        """
        return self._end_index

    @end_index.setter
    def end_index(self, end_index):
        """Sets the end_index of this JobPartExtendedDto.


        :param end_index: The end_index of this JobPartExtendedDto.  # noqa: E501
        :type: int
        """

        self._end_index = end_index

    @property
    def is_parent_job_split(self):
        """Gets the is_parent_job_split of this JobPartExtendedDto.  # noqa: E501


        :return: The is_parent_job_split of this JobPartExtendedDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_parent_job_split

    @is_parent_job_split.setter
    def is_parent_job_split(self, is_parent_job_split):
        """Sets the is_parent_job_split of this JobPartExtendedDto.


        :param is_parent_job_split: The is_parent_job_split of this JobPartExtendedDto.  # noqa: E501
        :type: bool
        """

        self._is_parent_job_split = is_parent_job_split

    @property
    def date_created(self):
        """Gets the date_created of this JobPartExtendedDto.  # noqa: E501


        :return: The date_created of this JobPartExtendedDto.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this JobPartExtendedDto.


        :param date_created: The date_created of this JobPartExtendedDto.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def project(self):
        """Gets the project of this JobPartExtendedDto.  # noqa: E501


        :return: The project of this JobPartExtendedDto.  # noqa: E501
        :rtype: ProjectReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this JobPartExtendedDto.


        :param project: The project of this JobPartExtendedDto.  # noqa: E501
        :type: ProjectReference
        """

        self._project = project

    @property
    def last_workflow_level(self):
        """Gets the last_workflow_level of this JobPartExtendedDto.  # noqa: E501


        :return: The last_workflow_level of this JobPartExtendedDto.  # noqa: E501
        :rtype: int
        """
        return self._last_workflow_level

    @last_workflow_level.setter
    def last_workflow_level(self, last_workflow_level):
        """Sets the last_workflow_level of this JobPartExtendedDto.


        :param last_workflow_level: The last_workflow_level of this JobPartExtendedDto.  # noqa: E501
        :type: int
        """

        self._last_workflow_level = last_workflow_level

    @property
    def work_unit(self):
        """Gets the work_unit of this JobPartExtendedDto.  # noqa: E501


        :return: The work_unit of this JobPartExtendedDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._work_unit

    @work_unit.setter
    def work_unit(self, work_unit):
        """Sets the work_unit of this JobPartExtendedDto.


        :param work_unit: The work_unit of this JobPartExtendedDto.  # noqa: E501
        :type: IdReference
        """

        self._work_unit = work_unit

    @property
    def imported(self):
        """Gets the imported of this JobPartExtendedDto.  # noqa: E501


        :return: The imported of this JobPartExtendedDto.  # noqa: E501
        :rtype: bool
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this JobPartExtendedDto.


        :param imported: The imported of this JobPartExtendedDto.  # noqa: E501
        :type: bool
        """

        self._imported = imported

    @property
    def continuous(self):
        """Gets the continuous of this JobPartExtendedDto.  # noqa: E501


        :return: The continuous of this JobPartExtendedDto.  # noqa: E501
        :rtype: bool
        """
        return self._continuous

    @continuous.setter
    def continuous(self, continuous):
        """Sets the continuous of this JobPartExtendedDto.


        :param continuous: The continuous of this JobPartExtendedDto.  # noqa: E501
        :type: bool
        """

        self._continuous = continuous

    @property
    def continuous_job_info(self):
        """Gets the continuous_job_info of this JobPartExtendedDto.  # noqa: E501


        :return: The continuous_job_info of this JobPartExtendedDto.  # noqa: E501
        :rtype: ContinuousJobInfoDto
        """
        return self._continuous_job_info

    @continuous_job_info.setter
    def continuous_job_info(self, continuous_job_info):
        """Sets the continuous_job_info of this JobPartExtendedDto.


        :param continuous_job_info: The continuous_job_info of this JobPartExtendedDto.  # noqa: E501
        :type: ContinuousJobInfoDto
        """

        self._continuous_job_info = continuous_job_info

    @property
    def original_file_directory(self):
        """Gets the original_file_directory of this JobPartExtendedDto.  # noqa: E501


        :return: The original_file_directory of this JobPartExtendedDto.  # noqa: E501
        :rtype: str
        """
        return self._original_file_directory

    @original_file_directory.setter
    def original_file_directory(self, original_file_directory):
        """Sets the original_file_directory of this JobPartExtendedDto.


        :param original_file_directory: The original_file_directory of this JobPartExtendedDto.  # noqa: E501
        :type: str
        """

        self._original_file_directory = original_file_directory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobPartExtendedDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobPartExtendedDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
