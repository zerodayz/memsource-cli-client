# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TMMatchSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_type': 'str',
        'prev_or_next_segment': 'bool',
        'penalize_multi_context_match': 'bool',
        'ignore_tag_metadata': 'bool'
    }

    attribute_map = {
        'context_type': 'contextType',
        'prev_or_next_segment': 'prevOrNextSegment',
        'penalize_multi_context_match': 'penalizeMultiContextMatch',
        'ignore_tag_metadata': 'ignoreTagMetadata'
    }

    def __init__(self, context_type=None, prev_or_next_segment=None, penalize_multi_context_match=None, ignore_tag_metadata=None):  # noqa: E501
        """TMMatchSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._context_type = None
        self._prev_or_next_segment = None
        self._penalize_multi_context_match = None
        self._ignore_tag_metadata = None
        self.discriminator = None

        if context_type is not None:
            self.context_type = context_type
        if prev_or_next_segment is not None:
            self.prev_or_next_segment = prev_or_next_segment
        if penalize_multi_context_match is not None:
            self.penalize_multi_context_match = penalize_multi_context_match
        if ignore_tag_metadata is not None:
            self.ignore_tag_metadata = ignore_tag_metadata

    @property
    def context_type(self):
        """Gets the context_type of this TMMatchSettingsDto.  # noqa: E501

        Default: PREV_AND_NEXT_SEGMENT  # noqa: E501

        :return: The context_type of this TMMatchSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this TMMatchSettingsDto.

        Default: PREV_AND_NEXT_SEGMENT  # noqa: E501

        :param context_type: The context_type of this TMMatchSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["AUTO", "PREV_AND_NEXT_SEGMENT", "SEGMENT_KEY", "NO_CONTEXT"]  # noqa: E501
        if context_type not in allowed_values:
            raise ValueError(
                "Invalid value for `context_type` ({0}), must be one of {1}"  # noqa: E501
                .format(context_type, allowed_values)
            )

        self._context_type = context_type

    @property
    def prev_or_next_segment(self):
        """Gets the prev_or_next_segment of this TMMatchSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The prev_or_next_segment of this TMMatchSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._prev_or_next_segment

    @prev_or_next_segment.setter
    def prev_or_next_segment(self, prev_or_next_segment):
        """Sets the prev_or_next_segment of this TMMatchSettingsDto.

        Default: false  # noqa: E501

        :param prev_or_next_segment: The prev_or_next_segment of this TMMatchSettingsDto.  # noqa: E501
        :type: bool
        """

        self._prev_or_next_segment = prev_or_next_segment

    @property
    def penalize_multi_context_match(self):
        """Gets the penalize_multi_context_match of this TMMatchSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The penalize_multi_context_match of this TMMatchSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._penalize_multi_context_match

    @penalize_multi_context_match.setter
    def penalize_multi_context_match(self, penalize_multi_context_match):
        """Sets the penalize_multi_context_match of this TMMatchSettingsDto.

        Default: false  # noqa: E501

        :param penalize_multi_context_match: The penalize_multi_context_match of this TMMatchSettingsDto.  # noqa: E501
        :type: bool
        """

        self._penalize_multi_context_match = penalize_multi_context_match

    @property
    def ignore_tag_metadata(self):
        """Gets the ignore_tag_metadata of this TMMatchSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The ignore_tag_metadata of this TMMatchSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_tag_metadata

    @ignore_tag_metadata.setter
    def ignore_tag_metadata(self, ignore_tag_metadata):
        """Sets the ignore_tag_metadata of this TMMatchSettingsDto.

        Default: true  # noqa: E501

        :param ignore_tag_metadata: The ignore_tag_metadata of this TMMatchSettingsDto.  # noqa: E501
        :type: bool
        """

        self._ignore_tag_metadata = ignore_tag_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TMMatchSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TMMatchSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
