# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.counts_dto import CountsDto  # noqa: F401,E501


class MatchCountsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match100': 'CountsDto',
        'match95': 'CountsDto',
        'match85': 'CountsDto',
        'match75': 'CountsDto',
        'match50': 'CountsDto',
        'match0': 'CountsDto'
    }

    attribute_map = {
        'match100': 'match100',
        'match95': 'match95',
        'match85': 'match85',
        'match75': 'match75',
        'match50': 'match50',
        'match0': 'match0'
    }

    def __init__(self, match100=None, match95=None, match85=None, match75=None, match50=None, match0=None):  # noqa: E501
        """MatchCountsDto - a model defined in Swagger"""  # noqa: E501

        self._match100 = None
        self._match95 = None
        self._match85 = None
        self._match75 = None
        self._match50 = None
        self._match0 = None
        self.discriminator = None

        if match100 is not None:
            self.match100 = match100
        if match95 is not None:
            self.match95 = match95
        if match85 is not None:
            self.match85 = match85
        if match75 is not None:
            self.match75 = match75
        if match50 is not None:
            self.match50 = match50
        if match0 is not None:
            self.match0 = match0

    @property
    def match100(self):
        """Gets the match100 of this MatchCountsDto.  # noqa: E501


        :return: The match100 of this MatchCountsDto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match100

    @match100.setter
    def match100(self, match100):
        """Sets the match100 of this MatchCountsDto.


        :param match100: The match100 of this MatchCountsDto.  # noqa: E501
        :type: CountsDto
        """

        self._match100 = match100

    @property
    def match95(self):
        """Gets the match95 of this MatchCountsDto.  # noqa: E501


        :return: The match95 of this MatchCountsDto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match95

    @match95.setter
    def match95(self, match95):
        """Sets the match95 of this MatchCountsDto.


        :param match95: The match95 of this MatchCountsDto.  # noqa: E501
        :type: CountsDto
        """

        self._match95 = match95

    @property
    def match85(self):
        """Gets the match85 of this MatchCountsDto.  # noqa: E501


        :return: The match85 of this MatchCountsDto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match85

    @match85.setter
    def match85(self, match85):
        """Sets the match85 of this MatchCountsDto.


        :param match85: The match85 of this MatchCountsDto.  # noqa: E501
        :type: CountsDto
        """

        self._match85 = match85

    @property
    def match75(self):
        """Gets the match75 of this MatchCountsDto.  # noqa: E501


        :return: The match75 of this MatchCountsDto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match75

    @match75.setter
    def match75(self, match75):
        """Sets the match75 of this MatchCountsDto.


        :param match75: The match75 of this MatchCountsDto.  # noqa: E501
        :type: CountsDto
        """

        self._match75 = match75

    @property
    def match50(self):
        """Gets the match50 of this MatchCountsDto.  # noqa: E501


        :return: The match50 of this MatchCountsDto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match50

    @match50.setter
    def match50(self, match50):
        """Sets the match50 of this MatchCountsDto.


        :param match50: The match50 of this MatchCountsDto.  # noqa: E501
        :type: CountsDto
        """

        self._match50 = match50

    @property
    def match0(self):
        """Gets the match0 of this MatchCountsDto.  # noqa: E501


        :return: The match0 of this MatchCountsDto.  # noqa: E501
        :rtype: CountsDto
        """
        return self._match0

    @match0.setter
    def match0(self, match0):
        """Sets the match0 of this MatchCountsDto.


        :param match0: The match0 of this MatchCountsDto.  # noqa: E501
        :type: CountsDto
        """

        self._match0 = match0

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchCountsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchCountsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
