# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrganizationEmailTemplateDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'subject': 'str',
        'body': 'str',
        'cc_address': 'str',
        'bcc_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'subject': 'subject',
        'body': 'body',
        'cc_address': 'ccAddress',
        'bcc_address': 'bccAddress'
    }

    def __init__(self, id=None, type=None, name=None, subject=None, body=None, cc_address=None, bcc_address=None):  # noqa: E501
        """OrganizationEmailTemplateDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._name = None
        self._subject = None
        self._body = None
        self._cc_address = None
        self._bcc_address = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if cc_address is not None:
            self.cc_address = cc_address
        if bcc_address is not None:
            self.bcc_address = bcc_address

    @property
    def id(self):
        """Gets the id of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The id of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationEmailTemplateDto.


        :param id: The id of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The type of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrganizationEmailTemplateDto.


        :param type: The type of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["JobAssigned", "JobStatusChanged", "NextWorkflowStep", "JobRejected", "LoginInfo", "ProjectTransferredToBuyer", "SharedProjectAssigned", "SharedProjectStatusChanged", "JobWidgetProjectQuotePrepared", "JobWidgetProjectQuotePreparationFailure", "JobWidgetProjectCreated", "JobWidgetProjectCompleted", "JobBoardResponse", "JobBoardOffer", "CmsQuoteReady", "CmsWorkCompleted", "CmsJobRejected", "QUOTE_UPDATED", "QUOTE_STATUS_CHANGED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The name of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationEmailTemplateDto.


        :param name: The name of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def subject(self):
        """Gets the subject of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The subject of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this OrganizationEmailTemplateDto.


        :param subject: The subject of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The body of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this OrganizationEmailTemplateDto.


        :param body: The body of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def cc_address(self):
        """Gets the cc_address of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The cc_address of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._cc_address

    @cc_address.setter
    def cc_address(self, cc_address):
        """Sets the cc_address of this OrganizationEmailTemplateDto.


        :param cc_address: The cc_address of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """

        self._cc_address = cc_address

    @property
    def bcc_address(self):
        """Gets the bcc_address of this OrganizationEmailTemplateDto.  # noqa: E501


        :return: The bcc_address of this OrganizationEmailTemplateDto.  # noqa: E501
        :rtype: str
        """
        return self._bcc_address

    @bcc_address.setter
    def bcc_address(self, bcc_address):
        """Sets the bcc_address of this OrganizationEmailTemplateDto.


        :param bcc_address: The bcc_address of this OrganizationEmailTemplateDto.  # noqa: E501
        :type: str
        """

        self._bcc_address = bcc_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationEmailTemplateDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationEmailTemplateDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
