# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.file_dto import FileDto  # noqa: F401,E501


class FileListDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files': 'list[FileDto]',
        'current_folder': 'str',
        'encoded_current_folder': 'str',
        'root_folder': 'bool',
        'last_changed_files': 'list[FileDto]'
    }

    attribute_map = {
        'files': 'files',
        'current_folder': 'currentFolder',
        'encoded_current_folder': 'encodedCurrentFolder',
        'root_folder': 'rootFolder',
        'last_changed_files': 'lastChangedFiles'
    }

    def __init__(self, files=None, current_folder=None, encoded_current_folder=None, root_folder=None, last_changed_files=None):  # noqa: E501
        """FileListDto - a model defined in Swagger"""  # noqa: E501

        self._files = None
        self._current_folder = None
        self._encoded_current_folder = None
        self._root_folder = None
        self._last_changed_files = None
        self.discriminator = None

        if files is not None:
            self.files = files
        if current_folder is not None:
            self.current_folder = current_folder
        if encoded_current_folder is not None:
            self.encoded_current_folder = encoded_current_folder
        if root_folder is not None:
            self.root_folder = root_folder
        if last_changed_files is not None:
            self.last_changed_files = last_changed_files

    @property
    def files(self):
        """Gets the files of this FileListDto.  # noqa: E501


        :return: The files of this FileListDto.  # noqa: E501
        :rtype: list[FileDto]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FileListDto.


        :param files: The files of this FileListDto.  # noqa: E501
        :type: list[FileDto]
        """

        self._files = files

    @property
    def current_folder(self):
        """Gets the current_folder of this FileListDto.  # noqa: E501


        :return: The current_folder of this FileListDto.  # noqa: E501
        :rtype: str
        """
        return self._current_folder

    @current_folder.setter
    def current_folder(self, current_folder):
        """Sets the current_folder of this FileListDto.


        :param current_folder: The current_folder of this FileListDto.  # noqa: E501
        :type: str
        """

        self._current_folder = current_folder

    @property
    def encoded_current_folder(self):
        """Gets the encoded_current_folder of this FileListDto.  # noqa: E501


        :return: The encoded_current_folder of this FileListDto.  # noqa: E501
        :rtype: str
        """
        return self._encoded_current_folder

    @encoded_current_folder.setter
    def encoded_current_folder(self, encoded_current_folder):
        """Sets the encoded_current_folder of this FileListDto.


        :param encoded_current_folder: The encoded_current_folder of this FileListDto.  # noqa: E501
        :type: str
        """

        self._encoded_current_folder = encoded_current_folder

    @property
    def root_folder(self):
        """Gets the root_folder of this FileListDto.  # noqa: E501


        :return: The root_folder of this FileListDto.  # noqa: E501
        :rtype: bool
        """
        return self._root_folder

    @root_folder.setter
    def root_folder(self, root_folder):
        """Sets the root_folder of this FileListDto.


        :param root_folder: The root_folder of this FileListDto.  # noqa: E501
        :type: bool
        """

        self._root_folder = root_folder

    @property
    def last_changed_files(self):
        """Gets the last_changed_files of this FileListDto.  # noqa: E501


        :return: The last_changed_files of this FileListDto.  # noqa: E501
        :rtype: list[FileDto]
        """
        return self._last_changed_files

    @last_changed_files.setter
    def last_changed_files(self, last_changed_files):
        """Sets the last_changed_files of this FileListDto.


        :param last_changed_files: The last_changed_files of this FileListDto.  # noqa: E501
        :type: list[FileDto]
        """

        self._last_changed_files = last_changed_files

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileListDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileListDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
