# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

# from memsource_cli.models.attribute import Attribute  # noqa: F401,E501


class Attribute(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'sub_attributes': 'list[Attribute]',
        'multi_valued': 'bool',
        'description': 'str',
        'required': 'bool',
        'case_exact': 'bool',
        'mutability': 'str',
        'returned': 'str',
        'uniqueness': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'sub_attributes': 'subAttributes',
        'multi_valued': 'multiValued',
        'description': 'description',
        'required': 'required',
        'case_exact': 'caseExact',
        'mutability': 'mutability',
        'returned': 'returned',
        'uniqueness': 'uniqueness'
    }

    def __init__(self, name=None, type=None, sub_attributes=None, multi_valued=None, description=None, required=None, case_exact=None, mutability=None, returned=None, uniqueness=None):  # noqa: E501
        """Attribute - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._type = None
        self._sub_attributes = None
        self._multi_valued = None
        self._description = None
        self._required = None
        self._case_exact = None
        self._mutability = None
        self._returned = None
        self._uniqueness = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if sub_attributes is not None:
            self.sub_attributes = sub_attributes
        if multi_valued is not None:
            self.multi_valued = multi_valued
        if description is not None:
            self.description = description
        if required is not None:
            self.required = required
        if case_exact is not None:
            self.case_exact = case_exact
        if mutability is not None:
            self.mutability = mutability
        if returned is not None:
            self.returned = returned
        if uniqueness is not None:
            self.uniqueness = uniqueness

    @property
    def name(self):
        """Gets the name of this Attribute.  # noqa: E501


        :return: The name of this Attribute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attribute.


        :param name: The name of this Attribute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Attribute.  # noqa: E501


        :return: The type of this Attribute.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Attribute.


        :param type: The type of this Attribute.  # noqa: E501
        :type: str
        """
        allowed_values = ["STRING", "BOOLEAN", "DECIMAL", "INTEGER", "DATE_TIME", "BINARY", "REFERENCE", "COMPLEX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sub_attributes(self):
        """Gets the sub_attributes of this Attribute.  # noqa: E501


        :return: The sub_attributes of this Attribute.  # noqa: E501
        :rtype: list[Attribute]
        """
        return self._sub_attributes

    @sub_attributes.setter
    def sub_attributes(self, sub_attributes):
        """Sets the sub_attributes of this Attribute.


        :param sub_attributes: The sub_attributes of this Attribute.  # noqa: E501
        :type: list[Attribute]
        """

        self._sub_attributes = sub_attributes

    @property
    def multi_valued(self):
        """Gets the multi_valued of this Attribute.  # noqa: E501


        :return: The multi_valued of this Attribute.  # noqa: E501
        :rtype: bool
        """
        return self._multi_valued

    @multi_valued.setter
    def multi_valued(self, multi_valued):
        """Sets the multi_valued of this Attribute.


        :param multi_valued: The multi_valued of this Attribute.  # noqa: E501
        :type: bool
        """

        self._multi_valued = multi_valued

    @property
    def description(self):
        """Gets the description of this Attribute.  # noqa: E501


        :return: The description of this Attribute.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attribute.


        :param description: The description of this Attribute.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def required(self):
        """Gets the required of this Attribute.  # noqa: E501


        :return: The required of this Attribute.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Attribute.


        :param required: The required of this Attribute.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def case_exact(self):
        """Gets the case_exact of this Attribute.  # noqa: E501


        :return: The case_exact of this Attribute.  # noqa: E501
        :rtype: bool
        """
        return self._case_exact

    @case_exact.setter
    def case_exact(self, case_exact):
        """Sets the case_exact of this Attribute.


        :param case_exact: The case_exact of this Attribute.  # noqa: E501
        :type: bool
        """

        self._case_exact = case_exact

    @property
    def mutability(self):
        """Gets the mutability of this Attribute.  # noqa: E501


        :return: The mutability of this Attribute.  # noqa: E501
        :rtype: str
        """
        return self._mutability

    @mutability.setter
    def mutability(self, mutability):
        """Sets the mutability of this Attribute.


        :param mutability: The mutability of this Attribute.  # noqa: E501
        :type: str
        """
        allowed_values = ["READ_ONLY", "READ_WRITE", "IMMUTABLE", "WRITE_ONLY"]  # noqa: E501
        if mutability not in allowed_values:
            raise ValueError(
                "Invalid value for `mutability` ({0}), must be one of {1}"  # noqa: E501
                .format(mutability, allowed_values)
            )

        self._mutability = mutability

    @property
    def returned(self):
        """Gets the returned of this Attribute.  # noqa: E501


        :return: The returned of this Attribute.  # noqa: E501
        :rtype: str
        """
        return self._returned

    @returned.setter
    def returned(self, returned):
        """Sets the returned of this Attribute.


        :param returned: The returned of this Attribute.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALWAYS", "NEVER", "DEFAULT", "REQUEST"]  # noqa: E501
        if returned not in allowed_values:
            raise ValueError(
                "Invalid value for `returned` ({0}), must be one of {1}"  # noqa: E501
                .format(returned, allowed_values)
            )

        self._returned = returned

    @property
    def uniqueness(self):
        """Gets the uniqueness of this Attribute.  # noqa: E501


        :return: The uniqueness of this Attribute.  # noqa: E501
        :rtype: str
        """
        return self._uniqueness

    @uniqueness.setter
    def uniqueness(self, uniqueness):
        """Sets the uniqueness of this Attribute.


        :param uniqueness: The uniqueness of this Attribute.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "SERVER", "GLOBAL"]  # noqa: E501
        if uniqueness not in allowed_values:
            raise ValueError(
                "Invalid value for `uniqueness` ({0}), must be one of {1}"  # noqa: E501
                .format(uniqueness, allowed_values)
            )

        self._uniqueness = uniqueness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Attribute, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attribute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
