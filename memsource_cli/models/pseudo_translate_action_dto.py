# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PseudoTranslateActionDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'replacement': 'str',
        'prefix': 'str',
        'suffix': 'str',
        'length': 'float'
    }

    attribute_map = {
        'replacement': 'replacement',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'length': 'length'
    }

    def __init__(self, replacement=None, prefix=None, suffix=None, length=None):  # noqa: E501
        """PseudoTranslateActionDto - a model defined in Swagger"""  # noqa: E501

        self._replacement = None
        self._prefix = None
        self._suffix = None
        self._length = None
        self.discriminator = None

        if replacement is not None:
            self.replacement = replacement
        if prefix is not None:
            self.prefix = prefix
        if suffix is not None:
            self.suffix = suffix
        if length is not None:
            self.length = length

    @property
    def replacement(self):
        """Gets the replacement of this PseudoTranslateActionDto.  # noqa: E501


        :return: The replacement of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._replacement

    @replacement.setter
    def replacement(self, replacement):
        """Sets the replacement of this PseudoTranslateActionDto.


        :param replacement: The replacement of this PseudoTranslateActionDto.  # noqa: E501
        :type: str
        """

        self._replacement = replacement

    @property
    def prefix(self):
        """Gets the prefix of this PseudoTranslateActionDto.  # noqa: E501


        :return: The prefix of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this PseudoTranslateActionDto.


        :param prefix: The prefix of this PseudoTranslateActionDto.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this PseudoTranslateActionDto.  # noqa: E501


        :return: The suffix of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this PseudoTranslateActionDto.


        :param suffix: The suffix of this PseudoTranslateActionDto.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def length(self):
        """Gets the length of this PseudoTranslateActionDto.  # noqa: E501


        :return: The length of this PseudoTranslateActionDto.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PseudoTranslateActionDto.


        :param length: The length of this PseudoTranslateActionDto.  # noqa: E501
        :type: float
        """

        self._length = length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PseudoTranslateActionDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PseudoTranslateActionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
