# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.quality_assurance_dto import QualityAssuranceDto  # noqa: F401,E501


class SegmentsCountsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_confirmed': 'bool',
        'chars_count': 'int',
        'completed_chars_count': 'int',
        'confirmed_chars_count': 'int',
        'confirmed_locked_chars_count': 'int',
        'locked_chars_count': 'int',
        'segments_count': 'int',
        'completed_segments_count': 'int',
        'locked_segments_count': 'int',
        'segment_groups_count': 'int',
        'translated_segments_count': 'int',
        'translated_locked_segments_count': 'int',
        'words_count': 'int',
        'completed_words_count': 'int',
        'confirmed_words_count': 'int',
        'confirmed_locked_words_count': 'int',
        'locked_words_count': 'int',
        'machine_translation_post_edited_segments_count': 'int',
        'machine_translation_relevant_segments_count': 'int',
        'quality_assurance': 'QualityAssuranceDto',
        'quality_assurance_resolved': 'bool'
    }

    attribute_map = {
        'all_confirmed': 'allConfirmed',
        'chars_count': 'charsCount',
        'completed_chars_count': 'completedCharsCount',
        'confirmed_chars_count': 'confirmedCharsCount',
        'confirmed_locked_chars_count': 'confirmedLockedCharsCount',
        'locked_chars_count': 'lockedCharsCount',
        'segments_count': 'segmentsCount',
        'completed_segments_count': 'completedSegmentsCount',
        'locked_segments_count': 'lockedSegmentsCount',
        'segment_groups_count': 'segmentGroupsCount',
        'translated_segments_count': 'translatedSegmentsCount',
        'translated_locked_segments_count': 'translatedLockedSegmentsCount',
        'words_count': 'wordsCount',
        'completed_words_count': 'completedWordsCount',
        'confirmed_words_count': 'confirmedWordsCount',
        'confirmed_locked_words_count': 'confirmedLockedWordsCount',
        'locked_words_count': 'lockedWordsCount',
        'machine_translation_post_edited_segments_count': 'machineTranslationPostEditedSegmentsCount',
        'machine_translation_relevant_segments_count': 'machineTranslationRelevantSegmentsCount',
        'quality_assurance': 'qualityAssurance',
        'quality_assurance_resolved': 'qualityAssuranceResolved'
    }

    def __init__(self, all_confirmed=None, chars_count=None, completed_chars_count=None, confirmed_chars_count=None, confirmed_locked_chars_count=None, locked_chars_count=None, segments_count=None, completed_segments_count=None, locked_segments_count=None, segment_groups_count=None, translated_segments_count=None, translated_locked_segments_count=None, words_count=None, completed_words_count=None, confirmed_words_count=None, confirmed_locked_words_count=None, locked_words_count=None, machine_translation_post_edited_segments_count=None, machine_translation_relevant_segments_count=None, quality_assurance=None, quality_assurance_resolved=None):  # noqa: E501
        """SegmentsCountsDto - a model defined in Swagger"""  # noqa: E501

        self._all_confirmed = None
        self._chars_count = None
        self._completed_chars_count = None
        self._confirmed_chars_count = None
        self._confirmed_locked_chars_count = None
        self._locked_chars_count = None
        self._segments_count = None
        self._completed_segments_count = None
        self._locked_segments_count = None
        self._segment_groups_count = None
        self._translated_segments_count = None
        self._translated_locked_segments_count = None
        self._words_count = None
        self._completed_words_count = None
        self._confirmed_words_count = None
        self._confirmed_locked_words_count = None
        self._locked_words_count = None
        self._machine_translation_post_edited_segments_count = None
        self._machine_translation_relevant_segments_count = None
        self._quality_assurance = None
        self._quality_assurance_resolved = None
        self.discriminator = None

        if all_confirmed is not None:
            self.all_confirmed = all_confirmed
        if chars_count is not None:
            self.chars_count = chars_count
        if completed_chars_count is not None:
            self.completed_chars_count = completed_chars_count
        if confirmed_chars_count is not None:
            self.confirmed_chars_count = confirmed_chars_count
        if confirmed_locked_chars_count is not None:
            self.confirmed_locked_chars_count = confirmed_locked_chars_count
        if locked_chars_count is not None:
            self.locked_chars_count = locked_chars_count
        if segments_count is not None:
            self.segments_count = segments_count
        if completed_segments_count is not None:
            self.completed_segments_count = completed_segments_count
        if locked_segments_count is not None:
            self.locked_segments_count = locked_segments_count
        if segment_groups_count is not None:
            self.segment_groups_count = segment_groups_count
        if translated_segments_count is not None:
            self.translated_segments_count = translated_segments_count
        if translated_locked_segments_count is not None:
            self.translated_locked_segments_count = translated_locked_segments_count
        if words_count is not None:
            self.words_count = words_count
        if completed_words_count is not None:
            self.completed_words_count = completed_words_count
        if confirmed_words_count is not None:
            self.confirmed_words_count = confirmed_words_count
        if confirmed_locked_words_count is not None:
            self.confirmed_locked_words_count = confirmed_locked_words_count
        if locked_words_count is not None:
            self.locked_words_count = locked_words_count
        if machine_translation_post_edited_segments_count is not None:
            self.machine_translation_post_edited_segments_count = machine_translation_post_edited_segments_count
        if machine_translation_relevant_segments_count is not None:
            self.machine_translation_relevant_segments_count = machine_translation_relevant_segments_count
        if quality_assurance is not None:
            self.quality_assurance = quality_assurance
        if quality_assurance_resolved is not None:
            self.quality_assurance_resolved = quality_assurance_resolved

    @property
    def all_confirmed(self):
        """Gets the all_confirmed of this SegmentsCountsDto.  # noqa: E501


        :return: The all_confirmed of this SegmentsCountsDto.  # noqa: E501
        :rtype: bool
        """
        return self._all_confirmed

    @all_confirmed.setter
    def all_confirmed(self, all_confirmed):
        """Sets the all_confirmed of this SegmentsCountsDto.


        :param all_confirmed: The all_confirmed of this SegmentsCountsDto.  # noqa: E501
        :type: bool
        """

        self._all_confirmed = all_confirmed

    @property
    def chars_count(self):
        """Gets the chars_count of this SegmentsCountsDto.  # noqa: E501


        :return: The chars_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._chars_count

    @chars_count.setter
    def chars_count(self, chars_count):
        """Sets the chars_count of this SegmentsCountsDto.


        :param chars_count: The chars_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._chars_count = chars_count

    @property
    def completed_chars_count(self):
        """Gets the completed_chars_count of this SegmentsCountsDto.  # noqa: E501


        :return: The completed_chars_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._completed_chars_count

    @completed_chars_count.setter
    def completed_chars_count(self, completed_chars_count):
        """Sets the completed_chars_count of this SegmentsCountsDto.


        :param completed_chars_count: The completed_chars_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._completed_chars_count = completed_chars_count

    @property
    def confirmed_chars_count(self):
        """Gets the confirmed_chars_count of this SegmentsCountsDto.  # noqa: E501


        :return: The confirmed_chars_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._confirmed_chars_count

    @confirmed_chars_count.setter
    def confirmed_chars_count(self, confirmed_chars_count):
        """Sets the confirmed_chars_count of this SegmentsCountsDto.


        :param confirmed_chars_count: The confirmed_chars_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._confirmed_chars_count = confirmed_chars_count

    @property
    def confirmed_locked_chars_count(self):
        """Gets the confirmed_locked_chars_count of this SegmentsCountsDto.  # noqa: E501


        :return: The confirmed_locked_chars_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._confirmed_locked_chars_count

    @confirmed_locked_chars_count.setter
    def confirmed_locked_chars_count(self, confirmed_locked_chars_count):
        """Sets the confirmed_locked_chars_count of this SegmentsCountsDto.


        :param confirmed_locked_chars_count: The confirmed_locked_chars_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._confirmed_locked_chars_count = confirmed_locked_chars_count

    @property
    def locked_chars_count(self):
        """Gets the locked_chars_count of this SegmentsCountsDto.  # noqa: E501


        :return: The locked_chars_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._locked_chars_count

    @locked_chars_count.setter
    def locked_chars_count(self, locked_chars_count):
        """Sets the locked_chars_count of this SegmentsCountsDto.


        :param locked_chars_count: The locked_chars_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._locked_chars_count = locked_chars_count

    @property
    def segments_count(self):
        """Gets the segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._segments_count

    @segments_count.setter
    def segments_count(self, segments_count):
        """Sets the segments_count of this SegmentsCountsDto.


        :param segments_count: The segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._segments_count = segments_count

    @property
    def completed_segments_count(self):
        """Gets the completed_segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The completed_segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._completed_segments_count

    @completed_segments_count.setter
    def completed_segments_count(self, completed_segments_count):
        """Sets the completed_segments_count of this SegmentsCountsDto.


        :param completed_segments_count: The completed_segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._completed_segments_count = completed_segments_count

    @property
    def locked_segments_count(self):
        """Gets the locked_segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The locked_segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._locked_segments_count

    @locked_segments_count.setter
    def locked_segments_count(self, locked_segments_count):
        """Sets the locked_segments_count of this SegmentsCountsDto.


        :param locked_segments_count: The locked_segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._locked_segments_count = locked_segments_count

    @property
    def segment_groups_count(self):
        """Gets the segment_groups_count of this SegmentsCountsDto.  # noqa: E501


        :return: The segment_groups_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._segment_groups_count

    @segment_groups_count.setter
    def segment_groups_count(self, segment_groups_count):
        """Sets the segment_groups_count of this SegmentsCountsDto.


        :param segment_groups_count: The segment_groups_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._segment_groups_count = segment_groups_count

    @property
    def translated_segments_count(self):
        """Gets the translated_segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The translated_segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._translated_segments_count

    @translated_segments_count.setter
    def translated_segments_count(self, translated_segments_count):
        """Sets the translated_segments_count of this SegmentsCountsDto.


        :param translated_segments_count: The translated_segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._translated_segments_count = translated_segments_count

    @property
    def translated_locked_segments_count(self):
        """Gets the translated_locked_segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The translated_locked_segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._translated_locked_segments_count

    @translated_locked_segments_count.setter
    def translated_locked_segments_count(self, translated_locked_segments_count):
        """Sets the translated_locked_segments_count of this SegmentsCountsDto.


        :param translated_locked_segments_count: The translated_locked_segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._translated_locked_segments_count = translated_locked_segments_count

    @property
    def words_count(self):
        """Gets the words_count of this SegmentsCountsDto.  # noqa: E501


        :return: The words_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._words_count

    @words_count.setter
    def words_count(self, words_count):
        """Sets the words_count of this SegmentsCountsDto.


        :param words_count: The words_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._words_count = words_count

    @property
    def completed_words_count(self):
        """Gets the completed_words_count of this SegmentsCountsDto.  # noqa: E501


        :return: The completed_words_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._completed_words_count

    @completed_words_count.setter
    def completed_words_count(self, completed_words_count):
        """Sets the completed_words_count of this SegmentsCountsDto.


        :param completed_words_count: The completed_words_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._completed_words_count = completed_words_count

    @property
    def confirmed_words_count(self):
        """Gets the confirmed_words_count of this SegmentsCountsDto.  # noqa: E501


        :return: The confirmed_words_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._confirmed_words_count

    @confirmed_words_count.setter
    def confirmed_words_count(self, confirmed_words_count):
        """Sets the confirmed_words_count of this SegmentsCountsDto.


        :param confirmed_words_count: The confirmed_words_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._confirmed_words_count = confirmed_words_count

    @property
    def confirmed_locked_words_count(self):
        """Gets the confirmed_locked_words_count of this SegmentsCountsDto.  # noqa: E501


        :return: The confirmed_locked_words_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._confirmed_locked_words_count

    @confirmed_locked_words_count.setter
    def confirmed_locked_words_count(self, confirmed_locked_words_count):
        """Sets the confirmed_locked_words_count of this SegmentsCountsDto.


        :param confirmed_locked_words_count: The confirmed_locked_words_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._confirmed_locked_words_count = confirmed_locked_words_count

    @property
    def locked_words_count(self):
        """Gets the locked_words_count of this SegmentsCountsDto.  # noqa: E501


        :return: The locked_words_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._locked_words_count

    @locked_words_count.setter
    def locked_words_count(self, locked_words_count):
        """Sets the locked_words_count of this SegmentsCountsDto.


        :param locked_words_count: The locked_words_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._locked_words_count = locked_words_count

    @property
    def machine_translation_post_edited_segments_count(self):
        """Gets the machine_translation_post_edited_segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The machine_translation_post_edited_segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_translation_post_edited_segments_count

    @machine_translation_post_edited_segments_count.setter
    def machine_translation_post_edited_segments_count(self, machine_translation_post_edited_segments_count):
        """Sets the machine_translation_post_edited_segments_count of this SegmentsCountsDto.


        :param machine_translation_post_edited_segments_count: The machine_translation_post_edited_segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._machine_translation_post_edited_segments_count = machine_translation_post_edited_segments_count

    @property
    def machine_translation_relevant_segments_count(self):
        """Gets the machine_translation_relevant_segments_count of this SegmentsCountsDto.  # noqa: E501


        :return: The machine_translation_relevant_segments_count of this SegmentsCountsDto.  # noqa: E501
        :rtype: int
        """
        return self._machine_translation_relevant_segments_count

    @machine_translation_relevant_segments_count.setter
    def machine_translation_relevant_segments_count(self, machine_translation_relevant_segments_count):
        """Sets the machine_translation_relevant_segments_count of this SegmentsCountsDto.


        :param machine_translation_relevant_segments_count: The machine_translation_relevant_segments_count of this SegmentsCountsDto.  # noqa: E501
        :type: int
        """

        self._machine_translation_relevant_segments_count = machine_translation_relevant_segments_count

    @property
    def quality_assurance(self):
        """Gets the quality_assurance of this SegmentsCountsDto.  # noqa: E501


        :return: The quality_assurance of this SegmentsCountsDto.  # noqa: E501
        :rtype: QualityAssuranceDto
        """
        return self._quality_assurance

    @quality_assurance.setter
    def quality_assurance(self, quality_assurance):
        """Sets the quality_assurance of this SegmentsCountsDto.


        :param quality_assurance: The quality_assurance of this SegmentsCountsDto.  # noqa: E501
        :type: QualityAssuranceDto
        """

        self._quality_assurance = quality_assurance

    @property
    def quality_assurance_resolved(self):
        """Gets the quality_assurance_resolved of this SegmentsCountsDto.  # noqa: E501


        :return: The quality_assurance_resolved of this SegmentsCountsDto.  # noqa: E501
        :rtype: bool
        """
        return self._quality_assurance_resolved

    @quality_assurance_resolved.setter
    def quality_assurance_resolved(self, quality_assurance_resolved):
        """Sets the quality_assurance_resolved of this SegmentsCountsDto.


        :param quality_assurance_resolved: The quality_assurance_resolved of this SegmentsCountsDto.  # noqa: E501
        :type: bool
        """

        self._quality_assurance_resolved = quality_assurance_resolved

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentsCountsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentsCountsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
