# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.enabled_check_dto import EnabledCheckDto  # noqa: F401,E501
from memsource_cli.models.regexp_check_rule_dto_v2 import RegexpCheckRuleDtoV2  # noqa: F401,E501


class QualityAssuranceChecksDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'forbidden_strings': 'list[str]',
        'enabled_checks': 'list[EnabledCheckDto]',
        'exclude_locked_segments': 'bool',
        'user_can_set_instant_qa': 'bool',
        'regexp_rules': 'list[RegexpCheckRuleDtoV2]'
    }

    attribute_map = {
        'forbidden_strings': 'forbiddenStrings',
        'enabled_checks': 'enabledChecks',
        'exclude_locked_segments': 'excludeLockedSegments',
        'user_can_set_instant_qa': 'userCanSetInstantQA',
        'regexp_rules': 'regexpRules'
    }

    def __init__(self, forbidden_strings=None, enabled_checks=None, exclude_locked_segments=None, user_can_set_instant_qa=None, regexp_rules=None):  # noqa: E501
        """QualityAssuranceChecksDto - a model defined in Swagger"""  # noqa: E501

        self._forbidden_strings = None
        self._enabled_checks = None
        self._exclude_locked_segments = None
        self._user_can_set_instant_qa = None
        self._regexp_rules = None
        self.discriminator = None

        if forbidden_strings is not None:
            self.forbidden_strings = forbidden_strings
        if enabled_checks is not None:
            self.enabled_checks = enabled_checks
        if exclude_locked_segments is not None:
            self.exclude_locked_segments = exclude_locked_segments
        if user_can_set_instant_qa is not None:
            self.user_can_set_instant_qa = user_can_set_instant_qa
        if regexp_rules is not None:
            self.regexp_rules = regexp_rules

    @property
    def forbidden_strings(self):
        """Gets the forbidden_strings of this QualityAssuranceChecksDto.  # noqa: E501


        :return: The forbidden_strings of this QualityAssuranceChecksDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._forbidden_strings

    @forbidden_strings.setter
    def forbidden_strings(self, forbidden_strings):
        """Sets the forbidden_strings of this QualityAssuranceChecksDto.


        :param forbidden_strings: The forbidden_strings of this QualityAssuranceChecksDto.  # noqa: E501
        :type: list[str]
        """

        self._forbidden_strings = forbidden_strings

    @property
    def enabled_checks(self):
        """Gets the enabled_checks of this QualityAssuranceChecksDto.  # noqa: E501

        enabledChecks  # noqa: E501

        :return: The enabled_checks of this QualityAssuranceChecksDto.  # noqa: E501
        :rtype: list[EnabledCheckDto]
        """
        return self._enabled_checks

    @enabled_checks.setter
    def enabled_checks(self, enabled_checks):
        """Sets the enabled_checks of this QualityAssuranceChecksDto.

        enabledChecks  # noqa: E501

        :param enabled_checks: The enabled_checks of this QualityAssuranceChecksDto.  # noqa: E501
        :type: list[EnabledCheckDto]
        """

        self._enabled_checks = enabled_checks

    @property
    def exclude_locked_segments(self):
        """Gets the exclude_locked_segments of this QualityAssuranceChecksDto.  # noqa: E501


        :return: The exclude_locked_segments of this QualityAssuranceChecksDto.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_locked_segments

    @exclude_locked_segments.setter
    def exclude_locked_segments(self, exclude_locked_segments):
        """Sets the exclude_locked_segments of this QualityAssuranceChecksDto.


        :param exclude_locked_segments: The exclude_locked_segments of this QualityAssuranceChecksDto.  # noqa: E501
        :type: bool
        """

        self._exclude_locked_segments = exclude_locked_segments

    @property
    def user_can_set_instant_qa(self):
        """Gets the user_can_set_instant_qa of this QualityAssuranceChecksDto.  # noqa: E501


        :return: The user_can_set_instant_qa of this QualityAssuranceChecksDto.  # noqa: E501
        :rtype: bool
        """
        return self._user_can_set_instant_qa

    @user_can_set_instant_qa.setter
    def user_can_set_instant_qa(self, user_can_set_instant_qa):
        """Sets the user_can_set_instant_qa of this QualityAssuranceChecksDto.


        :param user_can_set_instant_qa: The user_can_set_instant_qa of this QualityAssuranceChecksDto.  # noqa: E501
        :type: bool
        """

        self._user_can_set_instant_qa = user_can_set_instant_qa

    @property
    def regexp_rules(self):
        """Gets the regexp_rules of this QualityAssuranceChecksDto.  # noqa: E501


        :return: The regexp_rules of this QualityAssuranceChecksDto.  # noqa: E501
        :rtype: list[RegexpCheckRuleDtoV2]
        """
        return self._regexp_rules

    @regexp_rules.setter
    def regexp_rules(self, regexp_rules):
        """Sets the regexp_rules of this QualityAssuranceChecksDto.


        :param regexp_rules: The regexp_rules of this QualityAssuranceChecksDto.  # noqa: E501
        :type: list[RegexpCheckRuleDtoV2]
        """

        self._regexp_rules = regexp_rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualityAssuranceChecksDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualityAssuranceChecksDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
