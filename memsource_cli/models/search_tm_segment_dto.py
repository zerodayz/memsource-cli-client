# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.search_tm_client_dto import SearchTMClientDto  # noqa: F401,E501
from memsource_cli.models.search_tm_domain_dto import SearchTMDomainDto  # noqa: F401,E501
from memsource_cli.models.search_tm_project_dto import SearchTMProjectDto  # noqa: F401,E501
from memsource_cli.models.search_tm_sub_domain_dto import SearchTMSubDomainDto  # noqa: F401,E501
from memsource_cli.models.tag_metadata import TagMetadata  # noqa: F401,E501
from memsource_cli.models.user_reference import UserReference  # noqa: F401,E501


class SearchTMSegmentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'lang': 'str',
        'rtl': 'bool',
        'modified_at': 'int',
        'created_at': 'int',
        'modified_by': 'UserReference',
        'created_by': 'UserReference',
        'filename': 'str',
        'project': 'SearchTMProjectDto',
        'client': 'SearchTMClientDto',
        'domain': 'SearchTMDomainDto',
        'sub_domain': 'SearchTMSubDomainDto',
        'tag_metadata': 'list[TagMetadata]',
        'previous_segment': 'str',
        'next_segment': 'str',
        'key': 'str'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'lang': 'lang',
        'rtl': 'rtl',
        'modified_at': 'modifiedAt',
        'created_at': 'createdAt',
        'modified_by': 'modifiedBy',
        'created_by': 'createdBy',
        'filename': 'filename',
        'project': 'project',
        'client': 'client',
        'domain': 'domain',
        'sub_domain': 'subDomain',
        'tag_metadata': 'tagMetadata',
        'previous_segment': 'previousSegment',
        'next_segment': 'nextSegment',
        'key': 'key'
    }

    def __init__(self, id=None, text=None, lang=None, rtl=None, modified_at=None, created_at=None, modified_by=None, created_by=None, filename=None, project=None, client=None, domain=None, sub_domain=None, tag_metadata=None, previous_segment=None, next_segment=None, key=None):  # noqa: E501
        """SearchTMSegmentDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._text = None
        self._lang = None
        self._rtl = None
        self._modified_at = None
        self._created_at = None
        self._modified_by = None
        self._created_by = None
        self._filename = None
        self._project = None
        self._client = None
        self._domain = None
        self._sub_domain = None
        self._tag_metadata = None
        self._previous_segment = None
        self._next_segment = None
        self._key = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if text is not None:
            self.text = text
        if lang is not None:
            self.lang = lang
        if rtl is not None:
            self.rtl = rtl
        if modified_at is not None:
            self.modified_at = modified_at
        if created_at is not None:
            self.created_at = created_at
        if modified_by is not None:
            self.modified_by = modified_by
        if created_by is not None:
            self.created_by = created_by
        if filename is not None:
            self.filename = filename
        if project is not None:
            self.project = project
        if client is not None:
            self.client = client
        if domain is not None:
            self.domain = domain
        if sub_domain is not None:
            self.sub_domain = sub_domain
        if tag_metadata is not None:
            self.tag_metadata = tag_metadata
        if previous_segment is not None:
            self.previous_segment = previous_segment
        if next_segment is not None:
            self.next_segment = next_segment
        if key is not None:
            self.key = key

    @property
    def id(self):
        """Gets the id of this SearchTMSegmentDto.  # noqa: E501


        :return: The id of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SearchTMSegmentDto.


        :param id: The id of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this SearchTMSegmentDto.  # noqa: E501


        :return: The text of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SearchTMSegmentDto.


        :param text: The text of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def lang(self):
        """Gets the lang of this SearchTMSegmentDto.  # noqa: E501


        :return: The lang of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this SearchTMSegmentDto.


        :param lang: The lang of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._lang = lang

    @property
    def rtl(self):
        """Gets the rtl of this SearchTMSegmentDto.  # noqa: E501


        :return: The rtl of this SearchTMSegmentDto.  # noqa: E501
        :rtype: bool
        """
        return self._rtl

    @rtl.setter
    def rtl(self, rtl):
        """Sets the rtl of this SearchTMSegmentDto.


        :param rtl: The rtl of this SearchTMSegmentDto.  # noqa: E501
        :type: bool
        """

        self._rtl = rtl

    @property
    def modified_at(self):
        """Gets the modified_at of this SearchTMSegmentDto.  # noqa: E501


        :return: The modified_at of this SearchTMSegmentDto.  # noqa: E501
        :rtype: int
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this SearchTMSegmentDto.


        :param modified_at: The modified_at of this SearchTMSegmentDto.  # noqa: E501
        :type: int
        """

        self._modified_at = modified_at

    @property
    def created_at(self):
        """Gets the created_at of this SearchTMSegmentDto.  # noqa: E501


        :return: The created_at of this SearchTMSegmentDto.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SearchTMSegmentDto.


        :param created_at: The created_at of this SearchTMSegmentDto.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def modified_by(self):
        """Gets the modified_by of this SearchTMSegmentDto.  # noqa: E501


        :return: The modified_by of this SearchTMSegmentDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this SearchTMSegmentDto.


        :param modified_by: The modified_by of this SearchTMSegmentDto.  # noqa: E501
        :type: UserReference
        """

        self._modified_by = modified_by

    @property
    def created_by(self):
        """Gets the created_by of this SearchTMSegmentDto.  # noqa: E501


        :return: The created_by of this SearchTMSegmentDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SearchTMSegmentDto.


        :param created_by: The created_by of this SearchTMSegmentDto.  # noqa: E501
        :type: UserReference
        """

        self._created_by = created_by

    @property
    def filename(self):
        """Gets the filename of this SearchTMSegmentDto.  # noqa: E501


        :return: The filename of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this SearchTMSegmentDto.


        :param filename: The filename of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def project(self):
        """Gets the project of this SearchTMSegmentDto.  # noqa: E501


        :return: The project of this SearchTMSegmentDto.  # noqa: E501
        :rtype: SearchTMProjectDto
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this SearchTMSegmentDto.


        :param project: The project of this SearchTMSegmentDto.  # noqa: E501
        :type: SearchTMProjectDto
        """

        self._project = project

    @property
    def client(self):
        """Gets the client of this SearchTMSegmentDto.  # noqa: E501


        :return: The client of this SearchTMSegmentDto.  # noqa: E501
        :rtype: SearchTMClientDto
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this SearchTMSegmentDto.


        :param client: The client of this SearchTMSegmentDto.  # noqa: E501
        :type: SearchTMClientDto
        """

        self._client = client

    @property
    def domain(self):
        """Gets the domain of this SearchTMSegmentDto.  # noqa: E501


        :return: The domain of this SearchTMSegmentDto.  # noqa: E501
        :rtype: SearchTMDomainDto
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this SearchTMSegmentDto.


        :param domain: The domain of this SearchTMSegmentDto.  # noqa: E501
        :type: SearchTMDomainDto
        """

        self._domain = domain

    @property
    def sub_domain(self):
        """Gets the sub_domain of this SearchTMSegmentDto.  # noqa: E501


        :return: The sub_domain of this SearchTMSegmentDto.  # noqa: E501
        :rtype: SearchTMSubDomainDto
        """
        return self._sub_domain

    @sub_domain.setter
    def sub_domain(self, sub_domain):
        """Sets the sub_domain of this SearchTMSegmentDto.


        :param sub_domain: The sub_domain of this SearchTMSegmentDto.  # noqa: E501
        :type: SearchTMSubDomainDto
        """

        self._sub_domain = sub_domain

    @property
    def tag_metadata(self):
        """Gets the tag_metadata of this SearchTMSegmentDto.  # noqa: E501


        :return: The tag_metadata of this SearchTMSegmentDto.  # noqa: E501
        :rtype: list[TagMetadata]
        """
        return self._tag_metadata

    @tag_metadata.setter
    def tag_metadata(self, tag_metadata):
        """Sets the tag_metadata of this SearchTMSegmentDto.


        :param tag_metadata: The tag_metadata of this SearchTMSegmentDto.  # noqa: E501
        :type: list[TagMetadata]
        """

        self._tag_metadata = tag_metadata

    @property
    def previous_segment(self):
        """Gets the previous_segment of this SearchTMSegmentDto.  # noqa: E501


        :return: The previous_segment of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._previous_segment

    @previous_segment.setter
    def previous_segment(self, previous_segment):
        """Sets the previous_segment of this SearchTMSegmentDto.


        :param previous_segment: The previous_segment of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._previous_segment = previous_segment

    @property
    def next_segment(self):
        """Gets the next_segment of this SearchTMSegmentDto.  # noqa: E501


        :return: The next_segment of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._next_segment

    @next_segment.setter
    def next_segment(self, next_segment):
        """Sets the next_segment of this SearchTMSegmentDto.


        :param next_segment: The next_segment of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._next_segment = next_segment

    @property
    def key(self):
        """Gets the key of this SearchTMSegmentDto.  # noqa: E501


        :return: The key of this SearchTMSegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SearchTMSegmentDto.


        :param key: The key of this SearchTMSegmentDto.  # noqa: E501
        :type: str
        """

        self._key = key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchTMSegmentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchTMSegmentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
