# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebHookDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'url': 'str',
        'event': 'str',
        'hidden': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'event': 'event',
        'hidden': 'hidden'
    }

    def __init__(self, id=None, url=None, event=None, hidden=None):  # noqa: E501
        """WebHookDto - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._url = None
        self._event = None
        self._hidden = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if event is not None:
            self.event = event
        if hidden is not None:
            self.hidden = hidden

    @property
    def id(self):
        """Gets the id of this WebHookDto.  # noqa: E501


        :return: The id of this WebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebHookDto.


        :param id: The id of this WebHookDto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this WebHookDto.  # noqa: E501


        :return: The url of this WebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebHookDto.


        :param url: The url of this WebHookDto.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def event(self):
        """Gets the event of this WebHookDto.  # noqa: E501


        :return: The event of this WebHookDto.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this WebHookDto.


        :param event: The event of this WebHookDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["JOB_STATUS_CHANGED", "JOB_CREATED", "JOB_ASSIGNED", "JOB_DUE_DATE_CHANGED"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def hidden(self):
        """Gets the hidden of this WebHookDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The hidden of this WebHookDto.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this WebHookDto.

        Default: false  # noqa: E501

        :param hidden: The hidden of this WebHookDto.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebHookDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebHookDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
