# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegexpCheckRuleDtoV2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'source_regexp': 'str',
        'target_regexp': 'str',
        'id': 'str',
        'ignorable': 'bool',
        'instant': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'source_regexp': 'sourceRegexp',
        'target_regexp': 'targetRegexp',
        'id': 'id',
        'ignorable': 'ignorable',
        'instant': 'instant'
    }

    def __init__(self, description=None, source_regexp=None, target_regexp=None, id=None, ignorable=None, instant=None):  # noqa: E501
        """RegexpCheckRuleDtoV2 - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._source_regexp = None
        self._target_regexp = None
        self._id = None
        self._ignorable = None
        self._instant = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if source_regexp is not None:
            self.source_regexp = source_regexp
        if target_regexp is not None:
            self.target_regexp = target_regexp
        if id is not None:
            self.id = id
        if ignorable is not None:
            self.ignorable = ignorable
        if instant is not None:
            self.instant = instant

    @property
    def description(self):
        """Gets the description of this RegexpCheckRuleDtoV2.  # noqa: E501


        :return: The description of this RegexpCheckRuleDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegexpCheckRuleDtoV2.


        :param description: The description of this RegexpCheckRuleDtoV2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def source_regexp(self):
        """Gets the source_regexp of this RegexpCheckRuleDtoV2.  # noqa: E501


        :return: The source_regexp of this RegexpCheckRuleDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._source_regexp

    @source_regexp.setter
    def source_regexp(self, source_regexp):
        """Sets the source_regexp of this RegexpCheckRuleDtoV2.


        :param source_regexp: The source_regexp of this RegexpCheckRuleDtoV2.  # noqa: E501
        :type: str
        """

        self._source_regexp = source_regexp

    @property
    def target_regexp(self):
        """Gets the target_regexp of this RegexpCheckRuleDtoV2.  # noqa: E501


        :return: The target_regexp of this RegexpCheckRuleDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._target_regexp

    @target_regexp.setter
    def target_regexp(self, target_regexp):
        """Sets the target_regexp of this RegexpCheckRuleDtoV2.


        :param target_regexp: The target_regexp of this RegexpCheckRuleDtoV2.  # noqa: E501
        :type: str
        """

        self._target_regexp = target_regexp

    @property
    def id(self):
        """Gets the id of this RegexpCheckRuleDtoV2.  # noqa: E501


        :return: The id of this RegexpCheckRuleDtoV2.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegexpCheckRuleDtoV2.


        :param id: The id of this RegexpCheckRuleDtoV2.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ignorable(self):
        """Gets the ignorable of this RegexpCheckRuleDtoV2.  # noqa: E501


        :return: The ignorable of this RegexpCheckRuleDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._ignorable

    @ignorable.setter
    def ignorable(self, ignorable):
        """Sets the ignorable of this RegexpCheckRuleDtoV2.


        :param ignorable: The ignorable of this RegexpCheckRuleDtoV2.  # noqa: E501
        :type: bool
        """

        self._ignorable = ignorable

    @property
    def instant(self):
        """Gets the instant of this RegexpCheckRuleDtoV2.  # noqa: E501


        :return: The instant of this RegexpCheckRuleDtoV2.  # noqa: E501
        :rtype: bool
        """
        return self._instant

    @instant.setter
    def instant(self, instant):
        """Sets the instant of this RegexpCheckRuleDtoV2.


        :param instant: The instant of this RegexpCheckRuleDtoV2.  # noqa: E501
        :type: bool
        """

        self._instant = instant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegexpCheckRuleDtoV2, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegexpCheckRuleDtoV2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
