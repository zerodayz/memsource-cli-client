# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProgressDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_count': 'int',
        'finished_count': 'int',
        'overdue_count': 'int'
    }

    attribute_map = {
        'total_count': 'totalCount',
        'finished_count': 'finishedCount',
        'overdue_count': 'overdueCount'
    }

    def __init__(self, total_count=None, finished_count=None, overdue_count=None):  # noqa: E501
        """ProgressDto - a model defined in Swagger"""  # noqa: E501

        self._total_count = None
        self._finished_count = None
        self._overdue_count = None
        self.discriminator = None

        if total_count is not None:
            self.total_count = total_count
        if finished_count is not None:
            self.finished_count = finished_count
        if overdue_count is not None:
            self.overdue_count = overdue_count

    @property
    def total_count(self):
        """Gets the total_count of this ProgressDto.  # noqa: E501


        :return: The total_count of this ProgressDto.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this ProgressDto.


        :param total_count: The total_count of this ProgressDto.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def finished_count(self):
        """Gets the finished_count of this ProgressDto.  # noqa: E501


        :return: The finished_count of this ProgressDto.  # noqa: E501
        :rtype: int
        """
        return self._finished_count

    @finished_count.setter
    def finished_count(self, finished_count):
        """Sets the finished_count of this ProgressDto.


        :param finished_count: The finished_count of this ProgressDto.  # noqa: E501
        :type: int
        """

        self._finished_count = finished_count

    @property
    def overdue_count(self):
        """Gets the overdue_count of this ProgressDto.  # noqa: E501


        :return: The overdue_count of this ProgressDto.  # noqa: E501
        :rtype: int
        """
        return self._overdue_count

    @overdue_count.setter
    def overdue_count(self, overdue_count):
        """Sets the overdue_count of this ProgressDto.


        :param overdue_count: The overdue_count of this ProgressDto.  # noqa: E501
        :type: int
        """

        self._overdue_count = overdue_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProgressDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProgressDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
