# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class XmlSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rules_format': 'str',
        'include_elements_plain': 'str',
        'exclude_elements_plain': 'str',
        'include_attributes_plain': 'str',
        'exclude_attributes_plain': 'str',
        'inline_elements_non_translatable_plain': 'str',
        'inline_elements_plain': 'str',
        'inline_elements_auto_plain': 'bool',
        'html_subfilter_elements_plain': 'str',
        'entities': 'bool',
        'lock_elements_plain': 'str',
        'lock_attributes_plain': 'str',
        'include_x_path': 'str',
        'inline_elements_xpath': 'str',
        'inline_elements_non_translatable_x_path': 'str',
        'inline_elements_auto_x_path': 'bool',
        'html_subfilter_elements_xpath': 'str',
        'lock_x_path': 'str',
        'segmentation': 'bool',
        'tag_regexp': 'str',
        'context_note_xpath': 'str',
        'max_len_x_path': 'str',
        'preserve_whitespace_x_path': 'str',
        'preserve_char_entities': 'str',
        'context_key_x_path': 'str',
        'xsl_url': 'str'
    }

    attribute_map = {
        'rules_format': 'rulesFormat',
        'include_elements_plain': 'includeElementsPlain',
        'exclude_elements_plain': 'excludeElementsPlain',
        'include_attributes_plain': 'includeAttributesPlain',
        'exclude_attributes_plain': 'excludeAttributesPlain',
        'inline_elements_non_translatable_plain': 'inlineElementsNonTranslatablePlain',
        'inline_elements_plain': 'inlineElementsPlain',
        'inline_elements_auto_plain': 'inlineElementsAutoPlain',
        'html_subfilter_elements_plain': 'htmlSubfilterElementsPlain',
        'entities': 'entities',
        'lock_elements_plain': 'lockElementsPlain',
        'lock_attributes_plain': 'lockAttributesPlain',
        'include_x_path': 'includeXPath',
        'inline_elements_xpath': 'inlineElementsXpath',
        'inline_elements_non_translatable_x_path': 'inlineElementsNonTranslatableXPath',
        'inline_elements_auto_x_path': 'inlineElementsAutoXPath',
        'html_subfilter_elements_xpath': 'htmlSubfilterElementsXpath',
        'lock_x_path': 'lockXPath',
        'segmentation': 'segmentation',
        'tag_regexp': 'tagRegexp',
        'context_note_xpath': 'contextNoteXpath',
        'max_len_x_path': 'maxLenXPath',
        'preserve_whitespace_x_path': 'preserveWhitespaceXPath',
        'preserve_char_entities': 'preserveCharEntities',
        'context_key_x_path': 'contextKeyXPath',
        'xsl_url': 'xslUrl'
    }

    def __init__(self, rules_format=None, include_elements_plain=None, exclude_elements_plain=None, include_attributes_plain=None, exclude_attributes_plain=None, inline_elements_non_translatable_plain=None, inline_elements_plain=None, inline_elements_auto_plain=None, html_subfilter_elements_plain=None, entities=None, lock_elements_plain=None, lock_attributes_plain=None, include_x_path=None, inline_elements_xpath=None, inline_elements_non_translatable_x_path=None, inline_elements_auto_x_path=None, html_subfilter_elements_xpath=None, lock_x_path=None, segmentation=None, tag_regexp=None, context_note_xpath=None, max_len_x_path=None, preserve_whitespace_x_path=None, preserve_char_entities=None, context_key_x_path=None, xsl_url=None):  # noqa: E501
        """XmlSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._rules_format = None
        self._include_elements_plain = None
        self._exclude_elements_plain = None
        self._include_attributes_plain = None
        self._exclude_attributes_plain = None
        self._inline_elements_non_translatable_plain = None
        self._inline_elements_plain = None
        self._inline_elements_auto_plain = None
        self._html_subfilter_elements_plain = None
        self._entities = None
        self._lock_elements_plain = None
        self._lock_attributes_plain = None
        self._include_x_path = None
        self._inline_elements_xpath = None
        self._inline_elements_non_translatable_x_path = None
        self._inline_elements_auto_x_path = None
        self._html_subfilter_elements_xpath = None
        self._lock_x_path = None
        self._segmentation = None
        self._tag_regexp = None
        self._context_note_xpath = None
        self._max_len_x_path = None
        self._preserve_whitespace_x_path = None
        self._preserve_char_entities = None
        self._context_key_x_path = None
        self._xsl_url = None
        self.discriminator = None

        if rules_format is not None:
            self.rules_format = rules_format
        if include_elements_plain is not None:
            self.include_elements_plain = include_elements_plain
        if exclude_elements_plain is not None:
            self.exclude_elements_plain = exclude_elements_plain
        if include_attributes_plain is not None:
            self.include_attributes_plain = include_attributes_plain
        if exclude_attributes_plain is not None:
            self.exclude_attributes_plain = exclude_attributes_plain
        if inline_elements_non_translatable_plain is not None:
            self.inline_elements_non_translatable_plain = inline_elements_non_translatable_plain
        if inline_elements_plain is not None:
            self.inline_elements_plain = inline_elements_plain
        if inline_elements_auto_plain is not None:
            self.inline_elements_auto_plain = inline_elements_auto_plain
        if html_subfilter_elements_plain is not None:
            self.html_subfilter_elements_plain = html_subfilter_elements_plain
        if entities is not None:
            self.entities = entities
        if lock_elements_plain is not None:
            self.lock_elements_plain = lock_elements_plain
        if lock_attributes_plain is not None:
            self.lock_attributes_plain = lock_attributes_plain
        if include_x_path is not None:
            self.include_x_path = include_x_path
        if inline_elements_xpath is not None:
            self.inline_elements_xpath = inline_elements_xpath
        if inline_elements_non_translatable_x_path is not None:
            self.inline_elements_non_translatable_x_path = inline_elements_non_translatable_x_path
        if inline_elements_auto_x_path is not None:
            self.inline_elements_auto_x_path = inline_elements_auto_x_path
        if html_subfilter_elements_xpath is not None:
            self.html_subfilter_elements_xpath = html_subfilter_elements_xpath
        if lock_x_path is not None:
            self.lock_x_path = lock_x_path
        if segmentation is not None:
            self.segmentation = segmentation
        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if context_note_xpath is not None:
            self.context_note_xpath = context_note_xpath
        if max_len_x_path is not None:
            self.max_len_x_path = max_len_x_path
        if preserve_whitespace_x_path is not None:
            self.preserve_whitespace_x_path = preserve_whitespace_x_path
        if preserve_char_entities is not None:
            self.preserve_char_entities = preserve_char_entities
        if context_key_x_path is not None:
            self.context_key_x_path = context_key_x_path
        if xsl_url is not None:
            self.xsl_url = xsl_url

    @property
    def rules_format(self):
        """Gets the rules_format of this XmlSettingsDto.  # noqa: E501

        Default: PLAIN  # noqa: E501

        :return: The rules_format of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._rules_format

    @rules_format.setter
    def rules_format(self, rules_format):
        """Sets the rules_format of this XmlSettingsDto.

        Default: PLAIN  # noqa: E501

        :param rules_format: The rules_format of this XmlSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PLAIN", "XPATH"]  # noqa: E501
        if rules_format not in allowed_values:
            raise ValueError(
                "Invalid value for `rules_format` ({0}), must be one of {1}"  # noqa: E501
                .format(rules_format, allowed_values)
            )

        self._rules_format = rules_format

    @property
    def include_elements_plain(self):
        """Gets the include_elements_plain of this XmlSettingsDto.  # noqa: E501

        Default: *, example: \"para,heading\"  # noqa: E501

        :return: The include_elements_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._include_elements_plain

    @include_elements_plain.setter
    def include_elements_plain(self, include_elements_plain):
        """Sets the include_elements_plain of this XmlSettingsDto.

        Default: *, example: \"para,heading\"  # noqa: E501

        :param include_elements_plain: The include_elements_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._include_elements_plain = include_elements_plain

    @property
    def exclude_elements_plain(self):
        """Gets the exclude_elements_plain of this XmlSettingsDto.  # noqa: E501

        Example: \"script,par\"  # noqa: E501

        :return: The exclude_elements_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._exclude_elements_plain

    @exclude_elements_plain.setter
    def exclude_elements_plain(self, exclude_elements_plain):
        """Sets the exclude_elements_plain of this XmlSettingsDto.

        Example: \"script,par\"  # noqa: E501

        :param exclude_elements_plain: The exclude_elements_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._exclude_elements_plain = exclude_elements_plain

    @property
    def include_attributes_plain(self):
        """Gets the include_attributes_plain of this XmlSettingsDto.  # noqa: E501

        Example: \"title\"  # noqa: E501

        :return: The include_attributes_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._include_attributes_plain

    @include_attributes_plain.setter
    def include_attributes_plain(self, include_attributes_plain):
        """Sets the include_attributes_plain of this XmlSettingsDto.

        Example: \"title\"  # noqa: E501

        :param include_attributes_plain: The include_attributes_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._include_attributes_plain = include_attributes_plain

    @property
    def exclude_attributes_plain(self):
        """Gets the exclude_attributes_plain of this XmlSettingsDto.  # noqa: E501

        Example: \"lang,href\"  # noqa: E501

        :return: The exclude_attributes_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._exclude_attributes_plain

    @exclude_attributes_plain.setter
    def exclude_attributes_plain(self, exclude_attributes_plain):
        """Sets the exclude_attributes_plain of this XmlSettingsDto.

        Example: \"lang,href\"  # noqa: E501

        :param exclude_attributes_plain: The exclude_attributes_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._exclude_attributes_plain = exclude_attributes_plain

    @property
    def inline_elements_non_translatable_plain(self):
        """Gets the inline_elements_non_translatable_plain of this XmlSettingsDto.  # noqa: E501

        Example: \"tt,b\"  # noqa: E501

        :return: The inline_elements_non_translatable_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._inline_elements_non_translatable_plain

    @inline_elements_non_translatable_plain.setter
    def inline_elements_non_translatable_plain(self, inline_elements_non_translatable_plain):
        """Sets the inline_elements_non_translatable_plain of this XmlSettingsDto.

        Example: \"tt,b\"  # noqa: E501

        :param inline_elements_non_translatable_plain: The inline_elements_non_translatable_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._inline_elements_non_translatable_plain = inline_elements_non_translatable_plain

    @property
    def inline_elements_plain(self):
        """Gets the inline_elements_plain of this XmlSettingsDto.  # noqa: E501


        :return: The inline_elements_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._inline_elements_plain

    @inline_elements_plain.setter
    def inline_elements_plain(self, inline_elements_plain):
        """Sets the inline_elements_plain of this XmlSettingsDto.


        :param inline_elements_plain: The inline_elements_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._inline_elements_plain = inline_elements_plain

    @property
    def inline_elements_auto_plain(self):
        """Gets the inline_elements_auto_plain of this XmlSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The inline_elements_auto_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._inline_elements_auto_plain

    @inline_elements_auto_plain.setter
    def inline_elements_auto_plain(self, inline_elements_auto_plain):
        """Sets the inline_elements_auto_plain of this XmlSettingsDto.

        Default: false  # noqa: E501

        :param inline_elements_auto_plain: The inline_elements_auto_plain of this XmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._inline_elements_auto_plain = inline_elements_auto_plain

    @property
    def html_subfilter_elements_plain(self):
        """Gets the html_subfilter_elements_plain of this XmlSettingsDto.  # noqa: E501

        Example: \"tt,b\"  # noqa: E501

        :return: The html_subfilter_elements_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._html_subfilter_elements_plain

    @html_subfilter_elements_plain.setter
    def html_subfilter_elements_plain(self, html_subfilter_elements_plain):
        """Sets the html_subfilter_elements_plain of this XmlSettingsDto.

        Example: \"tt,b\"  # noqa: E501

        :param html_subfilter_elements_plain: The html_subfilter_elements_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._html_subfilter_elements_plain = html_subfilter_elements_plain

    @property
    def entities(self):
        """Gets the entities of this XmlSettingsDto.  # noqa: E501


        :return: The entities of this XmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._entities

    @entities.setter
    def entities(self, entities):
        """Sets the entities of this XmlSettingsDto.


        :param entities: The entities of this XmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._entities = entities

    @property
    def lock_elements_plain(self):
        """Gets the lock_elements_plain of this XmlSettingsDto.  # noqa: E501


        :return: The lock_elements_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._lock_elements_plain

    @lock_elements_plain.setter
    def lock_elements_plain(self, lock_elements_plain):
        """Sets the lock_elements_plain of this XmlSettingsDto.


        :param lock_elements_plain: The lock_elements_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._lock_elements_plain = lock_elements_plain

    @property
    def lock_attributes_plain(self):
        """Gets the lock_attributes_plain of this XmlSettingsDto.  # noqa: E501


        :return: The lock_attributes_plain of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._lock_attributes_plain

    @lock_attributes_plain.setter
    def lock_attributes_plain(self, lock_attributes_plain):
        """Sets the lock_attributes_plain of this XmlSettingsDto.


        :param lock_attributes_plain: The lock_attributes_plain of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._lock_attributes_plain = lock_attributes_plain

    @property
    def include_x_path(self):
        """Gets the include_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The include_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._include_x_path

    @include_x_path.setter
    def include_x_path(self, include_x_path):
        """Sets the include_x_path of this XmlSettingsDto.


        :param include_x_path: The include_x_path of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._include_x_path = include_x_path

    @property
    def inline_elements_xpath(self):
        """Gets the inline_elements_xpath of this XmlSettingsDto.  # noqa: E501


        :return: The inline_elements_xpath of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._inline_elements_xpath

    @inline_elements_xpath.setter
    def inline_elements_xpath(self, inline_elements_xpath):
        """Sets the inline_elements_xpath of this XmlSettingsDto.


        :param inline_elements_xpath: The inline_elements_xpath of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._inline_elements_xpath = inline_elements_xpath

    @property
    def inline_elements_non_translatable_x_path(self):
        """Gets the inline_elements_non_translatable_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The inline_elements_non_translatable_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._inline_elements_non_translatable_x_path

    @inline_elements_non_translatable_x_path.setter
    def inline_elements_non_translatable_x_path(self, inline_elements_non_translatable_x_path):
        """Sets the inline_elements_non_translatable_x_path of this XmlSettingsDto.


        :param inline_elements_non_translatable_x_path: The inline_elements_non_translatable_x_path of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._inline_elements_non_translatable_x_path = inline_elements_non_translatable_x_path

    @property
    def inline_elements_auto_x_path(self):
        """Gets the inline_elements_auto_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The inline_elements_auto_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._inline_elements_auto_x_path

    @inline_elements_auto_x_path.setter
    def inline_elements_auto_x_path(self, inline_elements_auto_x_path):
        """Sets the inline_elements_auto_x_path of this XmlSettingsDto.


        :param inline_elements_auto_x_path: The inline_elements_auto_x_path of this XmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._inline_elements_auto_x_path = inline_elements_auto_x_path

    @property
    def html_subfilter_elements_xpath(self):
        """Gets the html_subfilter_elements_xpath of this XmlSettingsDto.  # noqa: E501


        :return: The html_subfilter_elements_xpath of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._html_subfilter_elements_xpath

    @html_subfilter_elements_xpath.setter
    def html_subfilter_elements_xpath(self, html_subfilter_elements_xpath):
        """Sets the html_subfilter_elements_xpath of this XmlSettingsDto.


        :param html_subfilter_elements_xpath: The html_subfilter_elements_xpath of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._html_subfilter_elements_xpath = html_subfilter_elements_xpath

    @property
    def lock_x_path(self):
        """Gets the lock_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The lock_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._lock_x_path

    @lock_x_path.setter
    def lock_x_path(self, lock_x_path):
        """Sets the lock_x_path of this XmlSettingsDto.


        :param lock_x_path: The lock_x_path of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._lock_x_path = lock_x_path

    @property
    def segmentation(self):
        """Gets the segmentation of this XmlSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The segmentation of this XmlSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._segmentation

    @segmentation.setter
    def segmentation(self, segmentation):
        """Sets the segmentation of this XmlSettingsDto.

        Default: true  # noqa: E501

        :param segmentation: The segmentation of this XmlSettingsDto.  # noqa: E501
        :type: bool
        """

        self._segmentation = segmentation

    @property
    def tag_regexp(self):
        """Gets the tag_regexp of this XmlSettingsDto.  # noqa: E501


        :return: The tag_regexp of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this XmlSettingsDto.


        :param tag_regexp: The tag_regexp of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def context_note_xpath(self):
        """Gets the context_note_xpath of this XmlSettingsDto.  # noqa: E501


        :return: The context_note_xpath of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_note_xpath

    @context_note_xpath.setter
    def context_note_xpath(self, context_note_xpath):
        """Sets the context_note_xpath of this XmlSettingsDto.


        :param context_note_xpath: The context_note_xpath of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_note_xpath = context_note_xpath

    @property
    def max_len_x_path(self):
        """Gets the max_len_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The max_len_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._max_len_x_path

    @max_len_x_path.setter
    def max_len_x_path(self, max_len_x_path):
        """Sets the max_len_x_path of this XmlSettingsDto.


        :param max_len_x_path: The max_len_x_path of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._max_len_x_path = max_len_x_path

    @property
    def preserve_whitespace_x_path(self):
        """Gets the preserve_whitespace_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The preserve_whitespace_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._preserve_whitespace_x_path

    @preserve_whitespace_x_path.setter
    def preserve_whitespace_x_path(self, preserve_whitespace_x_path):
        """Sets the preserve_whitespace_x_path of this XmlSettingsDto.


        :param preserve_whitespace_x_path: The preserve_whitespace_x_path of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._preserve_whitespace_x_path = preserve_whitespace_x_path

    @property
    def preserve_char_entities(self):
        """Gets the preserve_char_entities of this XmlSettingsDto.  # noqa: E501


        :return: The preserve_char_entities of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._preserve_char_entities

    @preserve_char_entities.setter
    def preserve_char_entities(self, preserve_char_entities):
        """Sets the preserve_char_entities of this XmlSettingsDto.


        :param preserve_char_entities: The preserve_char_entities of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._preserve_char_entities = preserve_char_entities

    @property
    def context_key_x_path(self):
        """Gets the context_key_x_path of this XmlSettingsDto.  # noqa: E501


        :return: The context_key_x_path of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_x_path

    @context_key_x_path.setter
    def context_key_x_path(self, context_key_x_path):
        """Sets the context_key_x_path of this XmlSettingsDto.


        :param context_key_x_path: The context_key_x_path of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_x_path = context_key_x_path

    @property
    def xsl_url(self):
        """Gets the xsl_url of this XmlSettingsDto.  # noqa: E501


        :return: The xsl_url of this XmlSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._xsl_url

    @xsl_url.setter
    def xsl_url(self, xsl_url):
        """Sets the xsl_url of this XmlSettingsDto.


        :param xsl_url: The xsl_url of this XmlSettingsDto.  # noqa: E501
        :type: str
        """

        self._xsl_url = xsl_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XmlSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XmlSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
