# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SegmentWarning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'ignored': 'bool',
        'type': 'str',
        'repetition_group_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'ignored': 'ignored',
        'type': 'type',
        'repetition_group_id': 'repetitionGroupId'
    }

    discriminator_value_class_map = {
        'EmptyTagContentWarningDto': 'EmptyTagContentWarningDto',
        'SpellCheckWarningDto': 'SpellCheckWarningDto',
        'TerminologyWarningDto': 'TerminologyWarningDto',
        'ExtraNumbersWarningDto': 'ExtraNumbersWarningDto',
        'EmptyPairTagsWarningDto': 'EmptyPairTagsWarningDto',
        'TrailingPunctuationWarningDto': 'TrailingPunctuationWarningDto',
        'MoraviaWarningDto': 'MoraviaWarningDto',
        'MissingNumbersWarningDto': 'MissingNumbersWarningDto',
        'MalformedWarningDto': 'MalformedWarningDto',
        'TranslationLengthWarningDto': 'TranslationLengthWarningDto',
        'UnmodifiedFuzzyTranslationWarningDto': 'UnmodifiedFuzzyTranslationWarningDto',
        'ForbiddenStringWarningDto': 'ForbiddenStringWarningDto',
        'RepeatedWordsWarningDto': 'RepeatedWordsWarningDto',
        'NestedTagsWarningDto': 'NestedTagsWarningDto',
        'EmptyTranslationWarningDto': 'EmptyTranslationWarningDto',
        'UnresolvedConversationWarningDto': 'UnresolvedConversationWarningDto',
        'FormattingWarningDto': 'FormattingWarningDto',
        'LeadingAndTrailingSpacesWarningDto': 'LeadingAndTrailingSpacesWarningDto',
        'TargetSourceIdenticalWarningDto': 'TargetSourceIdenticalWarningDto',
        'NotConfirmedWarningDto': 'NotConfirmedWarningDto',
        'SourceTargetRegexpWarningDto': 'SourceTargetRegexpWarningDto',
        'NewerAtLowerLevelWarningDto': 'NewerAtLowerLevelWarningDto',
        'InconsistentTranslationWarningDto': 'InconsistentTranslationWarningDto',
        'UnresolvedCommentWarningDto': 'UnresolvedCommentWarningDto',
        'ForbiddenTermWarningDto': 'ForbiddenTermWarningDto',
        'JoinTagsWarningDto': 'JoinTagsWarningDto',
        'TrailingSpaceWarningDto': 'TrailingSpaceWarningDto',
        'MultipleSpacesWarningDto': 'MultipleSpacesWarningDto',
        'NonConformingTermWarningDto': 'NonConformingTermWarningDto',
        'InconsistentTagContentWarningDto': 'InconsistentTagContentWarningDto'
    }

    def __init__(self, id=None, ignored=None, type=None, repetition_group_id=None):  # noqa: E501
        """SegmentWarning - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._ignored = None
        self._type = None
        self._repetition_group_id = None
        self.discriminator = 'type'

        if id is not None:
            self.id = id
        if ignored is not None:
            self.ignored = ignored
        if type is not None:
            self.type = type
        if repetition_group_id is not None:
            self.repetition_group_id = repetition_group_id

    @property
    def id(self):
        """Gets the id of this SegmentWarning.  # noqa: E501


        :return: The id of this SegmentWarning.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SegmentWarning.


        :param id: The id of this SegmentWarning.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ignored(self):
        """Gets the ignored of this SegmentWarning.  # noqa: E501


        :return: The ignored of this SegmentWarning.  # noqa: E501
        :rtype: bool
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this SegmentWarning.


        :param ignored: The ignored of this SegmentWarning.  # noqa: E501
        :type: bool
        """

        self._ignored = ignored

    @property
    def type(self):
        """Gets the type of this SegmentWarning.  # noqa: E501


        :return: The type of this SegmentWarning.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SegmentWarning.


        :param type: The type of this SegmentWarning.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def repetition_group_id(self):
        """Gets the repetition_group_id of this SegmentWarning.  # noqa: E501


        :return: The repetition_group_id of this SegmentWarning.  # noqa: E501
        :rtype: str
        """
        return self._repetition_group_id

    @repetition_group_id.setter
    def repetition_group_id(self, repetition_group_id):
        """Sets the repetition_group_id of this SegmentWarning.


        :param repetition_group_id: The repetition_group_id of this SegmentWarning.  # noqa: E501
        :type: str
        """

        self._repetition_group_id = repetition_group_id

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentWarning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentWarning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
