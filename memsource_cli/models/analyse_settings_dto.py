# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AnalyseSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'include_fuzzy_repetitions': 'bool',
        'include_non_translatables': 'bool',
        'include_machine_translation_matches': 'bool',
        'include_confirmed_segments': 'bool',
        'include_numbers': 'bool',
        'include_locked_segments': 'bool',
        'count_source_units': 'bool',
        'include_trans_memory': 'bool',
        'naming_pattern': 'str'
    }

    attribute_map = {
        'type': 'type',
        'include_fuzzy_repetitions': 'includeFuzzyRepetitions',
        'include_non_translatables': 'includeNonTranslatables',
        'include_machine_translation_matches': 'includeMachineTranslationMatches',
        'include_confirmed_segments': 'includeConfirmedSegments',
        'include_numbers': 'includeNumbers',
        'include_locked_segments': 'includeLockedSegments',
        'count_source_units': 'countSourceUnits',
        'include_trans_memory': 'includeTransMemory',
        'naming_pattern': 'namingPattern'
    }

    def __init__(self, type=None, include_fuzzy_repetitions=None, include_non_translatables=None, include_machine_translation_matches=None, include_confirmed_segments=None, include_numbers=None, include_locked_segments=None, count_source_units=None, include_trans_memory=None, naming_pattern=None):  # noqa: E501
        """AnalyseSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._include_fuzzy_repetitions = None
        self._include_non_translatables = None
        self._include_machine_translation_matches = None
        self._include_confirmed_segments = None
        self._include_numbers = None
        self._include_locked_segments = None
        self._count_source_units = None
        self._include_trans_memory = None
        self._naming_pattern = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if include_fuzzy_repetitions is not None:
            self.include_fuzzy_repetitions = include_fuzzy_repetitions
        if include_non_translatables is not None:
            self.include_non_translatables = include_non_translatables
        if include_machine_translation_matches is not None:
            self.include_machine_translation_matches = include_machine_translation_matches
        if include_confirmed_segments is not None:
            self.include_confirmed_segments = include_confirmed_segments
        if include_numbers is not None:
            self.include_numbers = include_numbers
        if include_locked_segments is not None:
            self.include_locked_segments = include_locked_segments
        if count_source_units is not None:
            self.count_source_units = count_source_units
        if include_trans_memory is not None:
            self.include_trans_memory = include_trans_memory
        if naming_pattern is not None:
            self.naming_pattern = naming_pattern

    @property
    def type(self):
        """Gets the type of this AnalyseSettingsDto.  # noqa: E501


        :return: The type of this AnalyseSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AnalyseSettingsDto.


        :param type: The type of this AnalyseSettingsDto.  # noqa: E501
        :type: str
        """
        allowed_values = ["PreAnalyse", "PostAnalyse", "PreAnalyseTarget", "Compare"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def include_fuzzy_repetitions(self):
        """Gets the include_fuzzy_repetitions of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_fuzzy_repetitions of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_fuzzy_repetitions

    @include_fuzzy_repetitions.setter
    def include_fuzzy_repetitions(self, include_fuzzy_repetitions):
        """Sets the include_fuzzy_repetitions of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_fuzzy_repetitions: The include_fuzzy_repetitions of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_fuzzy_repetitions = include_fuzzy_repetitions

    @property
    def include_non_translatables(self):
        """Gets the include_non_translatables of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_non_translatables of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_non_translatables

    @include_non_translatables.setter
    def include_non_translatables(self, include_non_translatables):
        """Sets the include_non_translatables of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_non_translatables: The include_non_translatables of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_non_translatables = include_non_translatables

    @property
    def include_machine_translation_matches(self):
        """Gets the include_machine_translation_matches of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_machine_translation_matches of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_machine_translation_matches

    @include_machine_translation_matches.setter
    def include_machine_translation_matches(self, include_machine_translation_matches):
        """Sets the include_machine_translation_matches of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_machine_translation_matches: The include_machine_translation_matches of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_machine_translation_matches = include_machine_translation_matches

    @property
    def include_confirmed_segments(self):
        """Gets the include_confirmed_segments of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_confirmed_segments of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_confirmed_segments

    @include_confirmed_segments.setter
    def include_confirmed_segments(self, include_confirmed_segments):
        """Sets the include_confirmed_segments of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_confirmed_segments: The include_confirmed_segments of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_confirmed_segments = include_confirmed_segments

    @property
    def include_numbers(self):
        """Gets the include_numbers of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_numbers of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_numbers

    @include_numbers.setter
    def include_numbers(self, include_numbers):
        """Sets the include_numbers of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_numbers: The include_numbers of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_numbers = include_numbers

    @property
    def include_locked_segments(self):
        """Gets the include_locked_segments of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_locked_segments of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_locked_segments

    @include_locked_segments.setter
    def include_locked_segments(self, include_locked_segments):
        """Sets the include_locked_segments of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_locked_segments: The include_locked_segments of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_locked_segments = include_locked_segments

    @property
    def count_source_units(self):
        """Gets the count_source_units of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The count_source_units of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._count_source_units

    @count_source_units.setter
    def count_source_units(self, count_source_units):
        """Sets the count_source_units of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param count_source_units: The count_source_units of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._count_source_units = count_source_units

    @property
    def include_trans_memory(self):
        """Gets the include_trans_memory of this AnalyseSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The include_trans_memory of this AnalyseSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._include_trans_memory

    @include_trans_memory.setter
    def include_trans_memory(self, include_trans_memory):
        """Sets the include_trans_memory of this AnalyseSettingsDto.

        Default: false  # noqa: E501

        :param include_trans_memory: The include_trans_memory of this AnalyseSettingsDto.  # noqa: E501
        :type: bool
        """

        self._include_trans_memory = include_trans_memory

    @property
    def naming_pattern(self):
        """Gets the naming_pattern of this AnalyseSettingsDto.  # noqa: E501


        :return: The naming_pattern of this AnalyseSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._naming_pattern

    @naming_pattern.setter
    def naming_pattern(self, naming_pattern):
        """Sets the naming_pattern of this AnalyseSettingsDto.


        :param naming_pattern: The naming_pattern of this AnalyseSettingsDto.  # noqa: E501
        :type: str
        """

        self._naming_pattern = naming_pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyseSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyseSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
