# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.job_board_response_dto import JobBoardResponseDto  # noqa: F401,E501
from memsource_cli.models.organization_info import OrganizationInfo  # noqa: F401,E501
from memsource_cli.models.vendor_dto import VendorDto  # noqa: F401,E501


class DiscoveredVendorDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor': 'VendorDto',
        'org': 'OrganizationInfo',
        'total_responses': 'int',
        'last_responses': 'list[JobBoardResponseDto]'
    }

    attribute_map = {
        'vendor': 'vendor',
        'org': 'org',
        'total_responses': 'totalResponses',
        'last_responses': 'lastResponses'
    }

    def __init__(self, vendor=None, org=None, total_responses=None, last_responses=None):  # noqa: E501
        """DiscoveredVendorDto - a model defined in Swagger"""  # noqa: E501

        self._vendor = None
        self._org = None
        self._total_responses = None
        self._last_responses = None
        self.discriminator = None

        if vendor is not None:
            self.vendor = vendor
        if org is not None:
            self.org = org
        if total_responses is not None:
            self.total_responses = total_responses
        if last_responses is not None:
            self.last_responses = last_responses

    @property
    def vendor(self):
        """Gets the vendor of this DiscoveredVendorDto.  # noqa: E501


        :return: The vendor of this DiscoveredVendorDto.  # noqa: E501
        :rtype: VendorDto
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this DiscoveredVendorDto.


        :param vendor: The vendor of this DiscoveredVendorDto.  # noqa: E501
        :type: VendorDto
        """

        self._vendor = vendor

    @property
    def org(self):
        """Gets the org of this DiscoveredVendorDto.  # noqa: E501


        :return: The org of this DiscoveredVendorDto.  # noqa: E501
        :rtype: OrganizationInfo
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this DiscoveredVendorDto.


        :param org: The org of this DiscoveredVendorDto.  # noqa: E501
        :type: OrganizationInfo
        """

        self._org = org

    @property
    def total_responses(self):
        """Gets the total_responses of this DiscoveredVendorDto.  # noqa: E501


        :return: The total_responses of this DiscoveredVendorDto.  # noqa: E501
        :rtype: int
        """
        return self._total_responses

    @total_responses.setter
    def total_responses(self, total_responses):
        """Sets the total_responses of this DiscoveredVendorDto.


        :param total_responses: The total_responses of this DiscoveredVendorDto.  # noqa: E501
        :type: int
        """

        self._total_responses = total_responses

    @property
    def last_responses(self):
        """Gets the last_responses of this DiscoveredVendorDto.  # noqa: E501


        :return: The last_responses of this DiscoveredVendorDto.  # noqa: E501
        :rtype: list[JobBoardResponseDto]
        """
        return self._last_responses

    @last_responses.setter
    def last_responses(self, last_responses):
        """Sets the last_responses of this DiscoveredVendorDto.


        :param last_responses: The last_responses of this DiscoveredVendorDto.  # noqa: E501
        :type: list[JobBoardResponseDto]
        """

        self._last_responses = last_responses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredVendorDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredVendorDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
