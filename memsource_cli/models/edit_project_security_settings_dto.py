# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EditProjectSecuritySettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'translation_memory_download_enabled': 'bool',
        'web_editor_enabled_for_linguists': 'bool',
        'show_user_data_to_linguists': 'bool',
        'email_notifications': 'bool',
        'strict_workflow_finish': 'bool',
        'use_vendors': 'bool',
        'linguists_may_edit_locked_segments': 'bool',
        'linguists_may_set_auto_propagation': 'bool',
        'users_may_set_auto_propagation': 'bool'
    }

    attribute_map = {
        'translation_memory_download_enabled': 'translationMemoryDownloadEnabled',
        'web_editor_enabled_for_linguists': 'webEditorEnabledForLinguists',
        'show_user_data_to_linguists': 'showUserDataToLinguists',
        'email_notifications': 'emailNotifications',
        'strict_workflow_finish': 'strictWorkflowFinish',
        'use_vendors': 'useVendors',
        'linguists_may_edit_locked_segments': 'linguistsMayEditLockedSegments',
        'linguists_may_set_auto_propagation': 'linguistsMaySetAutoPropagation',
        'users_may_set_auto_propagation': 'usersMaySetAutoPropagation'
    }

    def __init__(self, translation_memory_download_enabled=None, web_editor_enabled_for_linguists=None, show_user_data_to_linguists=None, email_notifications=None, strict_workflow_finish=None, use_vendors=None, linguists_may_edit_locked_segments=None, linguists_may_set_auto_propagation=None, users_may_set_auto_propagation=None):  # noqa: E501
        """EditProjectSecuritySettingsDto - a model defined in Swagger"""  # noqa: E501

        self._translation_memory_download_enabled = None
        self._web_editor_enabled_for_linguists = None
        self._show_user_data_to_linguists = None
        self._email_notifications = None
        self._strict_workflow_finish = None
        self._use_vendors = None
        self._linguists_may_edit_locked_segments = None
        self._linguists_may_set_auto_propagation = None
        self._users_may_set_auto_propagation = None
        self.discriminator = None

        if translation_memory_download_enabled is not None:
            self.translation_memory_download_enabled = translation_memory_download_enabled
        if web_editor_enabled_for_linguists is not None:
            self.web_editor_enabled_for_linguists = web_editor_enabled_for_linguists
        if show_user_data_to_linguists is not None:
            self.show_user_data_to_linguists = show_user_data_to_linguists
        if email_notifications is not None:
            self.email_notifications = email_notifications
        if strict_workflow_finish is not None:
            self.strict_workflow_finish = strict_workflow_finish
        if use_vendors is not None:
            self.use_vendors = use_vendors
        if linguists_may_edit_locked_segments is not None:
            self.linguists_may_edit_locked_segments = linguists_may_edit_locked_segments
        if linguists_may_set_auto_propagation is not None:
            self.linguists_may_set_auto_propagation = linguists_may_set_auto_propagation
        if users_may_set_auto_propagation is not None:
            self.users_may_set_auto_propagation = users_may_set_auto_propagation

    @property
    def translation_memory_download_enabled(self):
        """Gets the translation_memory_download_enabled of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The translation_memory_download_enabled of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._translation_memory_download_enabled

    @translation_memory_download_enabled.setter
    def translation_memory_download_enabled(self, translation_memory_download_enabled):
        """Sets the translation_memory_download_enabled of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param translation_memory_download_enabled: The translation_memory_download_enabled of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._translation_memory_download_enabled = translation_memory_download_enabled

    @property
    def web_editor_enabled_for_linguists(self):
        """Gets the web_editor_enabled_for_linguists of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The web_editor_enabled_for_linguists of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._web_editor_enabled_for_linguists

    @web_editor_enabled_for_linguists.setter
    def web_editor_enabled_for_linguists(self, web_editor_enabled_for_linguists):
        """Sets the web_editor_enabled_for_linguists of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param web_editor_enabled_for_linguists: The web_editor_enabled_for_linguists of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._web_editor_enabled_for_linguists = web_editor_enabled_for_linguists

    @property
    def show_user_data_to_linguists(self):
        """Gets the show_user_data_to_linguists of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The show_user_data_to_linguists of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._show_user_data_to_linguists

    @show_user_data_to_linguists.setter
    def show_user_data_to_linguists(self, show_user_data_to_linguists):
        """Sets the show_user_data_to_linguists of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param show_user_data_to_linguists: The show_user_data_to_linguists of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._show_user_data_to_linguists = show_user_data_to_linguists

    @property
    def email_notifications(self):
        """Gets the email_notifications of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The email_notifications of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._email_notifications

    @email_notifications.setter
    def email_notifications(self, email_notifications):
        """Sets the email_notifications of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param email_notifications: The email_notifications of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._email_notifications = email_notifications

    @property
    def strict_workflow_finish(self):
        """Gets the strict_workflow_finish of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The strict_workflow_finish of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._strict_workflow_finish

    @strict_workflow_finish.setter
    def strict_workflow_finish(self, strict_workflow_finish):
        """Sets the strict_workflow_finish of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param strict_workflow_finish: The strict_workflow_finish of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._strict_workflow_finish = strict_workflow_finish

    @property
    def use_vendors(self):
        """Gets the use_vendors of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The use_vendors of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._use_vendors

    @use_vendors.setter
    def use_vendors(self, use_vendors):
        """Sets the use_vendors of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param use_vendors: The use_vendors of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._use_vendors = use_vendors

    @property
    def linguists_may_edit_locked_segments(self):
        """Gets the linguists_may_edit_locked_segments of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The linguists_may_edit_locked_segments of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._linguists_may_edit_locked_segments

    @linguists_may_edit_locked_segments.setter
    def linguists_may_edit_locked_segments(self, linguists_may_edit_locked_segments):
        """Sets the linguists_may_edit_locked_segments of this EditProjectSecuritySettingsDto.

        Default: false  # noqa: E501

        :param linguists_may_edit_locked_segments: The linguists_may_edit_locked_segments of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._linguists_may_edit_locked_segments = linguists_may_edit_locked_segments

    @property
    def linguists_may_set_auto_propagation(self):
        """Gets the linguists_may_set_auto_propagation of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The linguists_may_set_auto_propagation of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._linguists_may_set_auto_propagation

    @linguists_may_set_auto_propagation.setter
    def linguists_may_set_auto_propagation(self, linguists_may_set_auto_propagation):
        """Sets the linguists_may_set_auto_propagation of this EditProjectSecuritySettingsDto.

        Default: true  # noqa: E501

        :param linguists_may_set_auto_propagation: The linguists_may_set_auto_propagation of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._linguists_may_set_auto_propagation = linguists_may_set_auto_propagation

    @property
    def users_may_set_auto_propagation(self):
        """Gets the users_may_set_auto_propagation of this EditProjectSecuritySettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The users_may_set_auto_propagation of this EditProjectSecuritySettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._users_may_set_auto_propagation

    @users_may_set_auto_propagation.setter
    def users_may_set_auto_propagation(self, users_may_set_auto_propagation):
        """Sets the users_may_set_auto_propagation of this EditProjectSecuritySettingsDto.

        Default: true  # noqa: E501

        :param users_may_set_auto_propagation: The users_may_set_auto_propagation of this EditProjectSecuritySettingsDto.  # noqa: E501
        :type: bool
        """

        self._users_may_set_auto_propagation = users_may_set_auto_propagation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EditProjectSecuritySettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditProjectSecuritySettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
