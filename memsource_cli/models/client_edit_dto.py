# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501


class ClientEditDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'external_id': 'str',
        'note': 'str',
        'display_note_in_project': 'bool',
        'price_list': 'IdReference',
        'net_rate_scheme': 'IdReference'
    }

    attribute_map = {
        'name': 'name',
        'external_id': 'externalId',
        'note': 'note',
        'display_note_in_project': 'displayNoteInProject',
        'price_list': 'priceList',
        'net_rate_scheme': 'netRateScheme'
    }

    def __init__(self, name=None, external_id=None, note=None, display_note_in_project=None, price_list=None, net_rate_scheme=None):  # noqa: E501
        """ClientEditDto - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._external_id = None
        self._note = None
        self._display_note_in_project = None
        self._price_list = None
        self._net_rate_scheme = None
        self.discriminator = None

        self.name = name
        if external_id is not None:
            self.external_id = external_id
        if note is not None:
            self.note = note
        if display_note_in_project is not None:
            self.display_note_in_project = display_note_in_project
        if price_list is not None:
            self.price_list = price_list
        if net_rate_scheme is not None:
            self.net_rate_scheme = net_rate_scheme

    @property
    def name(self):
        """Gets the name of this ClientEditDto.  # noqa: E501


        :return: The name of this ClientEditDto.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClientEditDto.


        :param name: The name of this ClientEditDto.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")  # noqa: E501
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")  # noqa: E501

        self._name = name

    @property
    def external_id(self):
        """Gets the external_id of this ClientEditDto.  # noqa: E501


        :return: The external_id of this ClientEditDto.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ClientEditDto.


        :param external_id: The external_id of this ClientEditDto.  # noqa: E501
        :type: str
        """
        if external_id is not None and len(external_id) > 255:
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `255`")  # noqa: E501
        if external_id is not None and len(external_id) < 0:
            raise ValueError("Invalid value for `external_id`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_id = external_id

    @property
    def note(self):
        """Gets the note of this ClientEditDto.  # noqa: E501


        :return: The note of this ClientEditDto.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this ClientEditDto.


        :param note: The note of this ClientEditDto.  # noqa: E501
        :type: str
        """
        if note is not None and len(note) > 4096:
            raise ValueError("Invalid value for `note`, length must be less than or equal to `4096`")  # noqa: E501
        if note is not None and len(note) < 0:
            raise ValueError("Invalid value for `note`, length must be greater than or equal to `0`")  # noqa: E501

        self._note = note

    @property
    def display_note_in_project(self):
        """Gets the display_note_in_project of this ClientEditDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The display_note_in_project of this ClientEditDto.  # noqa: E501
        :rtype: bool
        """
        return self._display_note_in_project

    @display_note_in_project.setter
    def display_note_in_project(self, display_note_in_project):
        """Sets the display_note_in_project of this ClientEditDto.

        Default: false  # noqa: E501

        :param display_note_in_project: The display_note_in_project of this ClientEditDto.  # noqa: E501
        :type: bool
        """

        self._display_note_in_project = display_note_in_project

    @property
    def price_list(self):
        """Gets the price_list of this ClientEditDto.  # noqa: E501


        :return: The price_list of this ClientEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._price_list

    @price_list.setter
    def price_list(self, price_list):
        """Sets the price_list of this ClientEditDto.


        :param price_list: The price_list of this ClientEditDto.  # noqa: E501
        :type: IdReference
        """

        self._price_list = price_list

    @property
    def net_rate_scheme(self):
        """Gets the net_rate_scheme of this ClientEditDto.  # noqa: E501


        :return: The net_rate_scheme of this ClientEditDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._net_rate_scheme

    @net_rate_scheme.setter
    def net_rate_scheme(self, net_rate_scheme):
        """Sets the net_rate_scheme of this ClientEditDto.


        :param net_rate_scheme: The net_rate_scheme of this ClientEditDto.  # noqa: E501
        :type: IdReference
        """

        self._net_rate_scheme = net_rate_scheme

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientEditDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientEditDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
