# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MifSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extract_body_pages': 'bool',
        'extract_reference_pages': 'bool',
        'extract_master_pages': 'bool',
        'extract_hidden_pages': 'bool',
        'extract_variables': 'bool',
        'extract_index_markers': 'bool',
        'extract_links': 'bool',
        'extract_x_ref_def': 'bool',
        'extract_pgf_num_format': 'bool',
        'extract_custom_reference_pages': 'bool',
        'extract_default_reference_pages': 'bool',
        'extract_used_variables': 'bool',
        'extract_hidden_cond_text': 'bool',
        'extract_used_x_ref_def': 'bool',
        'extract_used_pgf_num_format': 'bool'
    }

    attribute_map = {
        'extract_body_pages': 'extractBodyPages',
        'extract_reference_pages': 'extractReferencePages',
        'extract_master_pages': 'extractMasterPages',
        'extract_hidden_pages': 'extractHiddenPages',
        'extract_variables': 'extractVariables',
        'extract_index_markers': 'extractIndexMarkers',
        'extract_links': 'extractLinks',
        'extract_x_ref_def': 'extractXRefDef',
        'extract_pgf_num_format': 'extractPgfNumFormat',
        'extract_custom_reference_pages': 'extractCustomReferencePages',
        'extract_default_reference_pages': 'extractDefaultReferencePages',
        'extract_used_variables': 'extractUsedVariables',
        'extract_hidden_cond_text': 'extractHiddenCondText',
        'extract_used_x_ref_def': 'extractUsedXRefDef',
        'extract_used_pgf_num_format': 'extractUsedPgfNumFormat'
    }

    def __init__(self, extract_body_pages=None, extract_reference_pages=None, extract_master_pages=None, extract_hidden_pages=None, extract_variables=None, extract_index_markers=None, extract_links=None, extract_x_ref_def=None, extract_pgf_num_format=None, extract_custom_reference_pages=None, extract_default_reference_pages=None, extract_used_variables=None, extract_hidden_cond_text=None, extract_used_x_ref_def=None, extract_used_pgf_num_format=None):  # noqa: E501
        """MifSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._extract_body_pages = None
        self._extract_reference_pages = None
        self._extract_master_pages = None
        self._extract_hidden_pages = None
        self._extract_variables = None
        self._extract_index_markers = None
        self._extract_links = None
        self._extract_x_ref_def = None
        self._extract_pgf_num_format = None
        self._extract_custom_reference_pages = None
        self._extract_default_reference_pages = None
        self._extract_used_variables = None
        self._extract_hidden_cond_text = None
        self._extract_used_x_ref_def = None
        self._extract_used_pgf_num_format = None
        self.discriminator = None

        if extract_body_pages is not None:
            self.extract_body_pages = extract_body_pages
        if extract_reference_pages is not None:
            self.extract_reference_pages = extract_reference_pages
        if extract_master_pages is not None:
            self.extract_master_pages = extract_master_pages
        if extract_hidden_pages is not None:
            self.extract_hidden_pages = extract_hidden_pages
        if extract_variables is not None:
            self.extract_variables = extract_variables
        if extract_index_markers is not None:
            self.extract_index_markers = extract_index_markers
        if extract_links is not None:
            self.extract_links = extract_links
        if extract_x_ref_def is not None:
            self.extract_x_ref_def = extract_x_ref_def
        if extract_pgf_num_format is not None:
            self.extract_pgf_num_format = extract_pgf_num_format
        if extract_custom_reference_pages is not None:
            self.extract_custom_reference_pages = extract_custom_reference_pages
        if extract_default_reference_pages is not None:
            self.extract_default_reference_pages = extract_default_reference_pages
        if extract_used_variables is not None:
            self.extract_used_variables = extract_used_variables
        if extract_hidden_cond_text is not None:
            self.extract_hidden_cond_text = extract_hidden_cond_text
        if extract_used_x_ref_def is not None:
            self.extract_used_x_ref_def = extract_used_x_ref_def
        if extract_used_pgf_num_format is not None:
            self.extract_used_pgf_num_format = extract_used_pgf_num_format

    @property
    def extract_body_pages(self):
        """Gets the extract_body_pages of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_body_pages of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_body_pages

    @extract_body_pages.setter
    def extract_body_pages(self, extract_body_pages):
        """Sets the extract_body_pages of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_body_pages: The extract_body_pages of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_body_pages = extract_body_pages

    @property
    def extract_reference_pages(self):
        """Gets the extract_reference_pages of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_reference_pages of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_reference_pages

    @extract_reference_pages.setter
    def extract_reference_pages(self, extract_reference_pages):
        """Sets the extract_reference_pages of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_reference_pages: The extract_reference_pages of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_reference_pages = extract_reference_pages

    @property
    def extract_master_pages(self):
        """Gets the extract_master_pages of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_master_pages of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_master_pages

    @extract_master_pages.setter
    def extract_master_pages(self, extract_master_pages):
        """Sets the extract_master_pages of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_master_pages: The extract_master_pages of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_master_pages = extract_master_pages

    @property
    def extract_hidden_pages(self):
        """Gets the extract_hidden_pages of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_hidden_pages of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_hidden_pages

    @extract_hidden_pages.setter
    def extract_hidden_pages(self, extract_hidden_pages):
        """Sets the extract_hidden_pages of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_hidden_pages: The extract_hidden_pages of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_hidden_pages = extract_hidden_pages

    @property
    def extract_variables(self):
        """Gets the extract_variables of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_variables of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_variables

    @extract_variables.setter
    def extract_variables(self, extract_variables):
        """Sets the extract_variables of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_variables: The extract_variables of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_variables = extract_variables

    @property
    def extract_index_markers(self):
        """Gets the extract_index_markers of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_index_markers of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_index_markers

    @extract_index_markers.setter
    def extract_index_markers(self, extract_index_markers):
        """Sets the extract_index_markers of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_index_markers: The extract_index_markers of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_index_markers = extract_index_markers

    @property
    def extract_links(self):
        """Gets the extract_links of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_links of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_links

    @extract_links.setter
    def extract_links(self, extract_links):
        """Sets the extract_links of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_links: The extract_links of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_links = extract_links

    @property
    def extract_x_ref_def(self):
        """Gets the extract_x_ref_def of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_x_ref_def of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_x_ref_def

    @extract_x_ref_def.setter
    def extract_x_ref_def(self, extract_x_ref_def):
        """Sets the extract_x_ref_def of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_x_ref_def: The extract_x_ref_def of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_x_ref_def = extract_x_ref_def

    @property
    def extract_pgf_num_format(self):
        """Gets the extract_pgf_num_format of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_pgf_num_format of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_pgf_num_format

    @extract_pgf_num_format.setter
    def extract_pgf_num_format(self, extract_pgf_num_format):
        """Sets the extract_pgf_num_format of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_pgf_num_format: The extract_pgf_num_format of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_pgf_num_format = extract_pgf_num_format

    @property
    def extract_custom_reference_pages(self):
        """Gets the extract_custom_reference_pages of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_custom_reference_pages of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_custom_reference_pages

    @extract_custom_reference_pages.setter
    def extract_custom_reference_pages(self, extract_custom_reference_pages):
        """Sets the extract_custom_reference_pages of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_custom_reference_pages: The extract_custom_reference_pages of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_custom_reference_pages = extract_custom_reference_pages

    @property
    def extract_default_reference_pages(self):
        """Gets the extract_default_reference_pages of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_default_reference_pages of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_default_reference_pages

    @extract_default_reference_pages.setter
    def extract_default_reference_pages(self, extract_default_reference_pages):
        """Sets the extract_default_reference_pages of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_default_reference_pages: The extract_default_reference_pages of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_default_reference_pages = extract_default_reference_pages

    @property
    def extract_used_variables(self):
        """Gets the extract_used_variables of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_used_variables of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_used_variables

    @extract_used_variables.setter
    def extract_used_variables(self, extract_used_variables):
        """Sets the extract_used_variables of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_used_variables: The extract_used_variables of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_used_variables = extract_used_variables

    @property
    def extract_hidden_cond_text(self):
        """Gets the extract_hidden_cond_text of this MifSettingsDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The extract_hidden_cond_text of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_hidden_cond_text

    @extract_hidden_cond_text.setter
    def extract_hidden_cond_text(self, extract_hidden_cond_text):
        """Sets the extract_hidden_cond_text of this MifSettingsDto.

        Default: false  # noqa: E501

        :param extract_hidden_cond_text: The extract_hidden_cond_text of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_hidden_cond_text = extract_hidden_cond_text

    @property
    def extract_used_x_ref_def(self):
        """Gets the extract_used_x_ref_def of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_used_x_ref_def of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_used_x_ref_def

    @extract_used_x_ref_def.setter
    def extract_used_x_ref_def(self, extract_used_x_ref_def):
        """Sets the extract_used_x_ref_def of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_used_x_ref_def: The extract_used_x_ref_def of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_used_x_ref_def = extract_used_x_ref_def

    @property
    def extract_used_pgf_num_format(self):
        """Gets the extract_used_pgf_num_format of this MifSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The extract_used_pgf_num_format of this MifSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._extract_used_pgf_num_format

    @extract_used_pgf_num_format.setter
    def extract_used_pgf_num_format(self, extract_used_pgf_num_format):
        """Sets the extract_used_pgf_num_format of this MifSettingsDto.

        Default: true  # noqa: E501

        :param extract_used_pgf_num_format: The extract_used_pgf_num_format of this MifSettingsDto.  # noqa: E501
        :type: bool
        """

        self._extract_used_pgf_num_format = extract_used_pgf_num_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MifSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MifSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
