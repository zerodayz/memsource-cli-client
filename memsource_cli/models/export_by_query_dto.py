# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501
from memsource_cli.models.uid_reference import UidReference  # noqa: F401,E501


class ExportByQueryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'export_target_langs': 'list[str]',
        'queries': 'list[str]',
        'query_langs': 'list[str]',
        'created_at_min': 'datetime',
        'created_at_max': 'datetime',
        'modified_at_min': 'datetime',
        'modified_at_max': 'datetime',
        'created_by': 'IdReference',
        'modified_by': 'IdReference',
        'filename': 'str',
        'project': 'UidReference',
        'callback_url': 'str'
    }

    attribute_map = {
        'export_target_langs': 'exportTargetLangs',
        'queries': 'queries',
        'query_langs': 'queryLangs',
        'created_at_min': 'createdAtMin',
        'created_at_max': 'createdAtMax',
        'modified_at_min': 'modifiedAtMin',
        'modified_at_max': 'modifiedAtMax',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'filename': 'filename',
        'project': 'project',
        'callback_url': 'callbackUrl'
    }

    def __init__(self, export_target_langs=None, queries=None, query_langs=None, created_at_min=None, created_at_max=None, modified_at_min=None, modified_at_max=None, created_by=None, modified_by=None, filename=None, project=None, callback_url=None):  # noqa: E501
        """ExportByQueryDto - a model defined in Swagger"""  # noqa: E501

        self._export_target_langs = None
        self._queries = None
        self._query_langs = None
        self._created_at_min = None
        self._created_at_max = None
        self._modified_at_min = None
        self._modified_at_max = None
        self._created_by = None
        self._modified_by = None
        self._filename = None
        self._project = None
        self._callback_url = None
        self.discriminator = None

        self.export_target_langs = export_target_langs
        self.queries = queries
        self.query_langs = query_langs
        if created_at_min is not None:
            self.created_at_min = created_at_min
        if created_at_max is not None:
            self.created_at_max = created_at_max
        if modified_at_min is not None:
            self.modified_at_min = modified_at_min
        if modified_at_max is not None:
            self.modified_at_max = modified_at_max
        if created_by is not None:
            self.created_by = created_by
        if modified_by is not None:
            self.modified_by = modified_by
        if filename is not None:
            self.filename = filename
        if project is not None:
            self.project = project
        if callback_url is not None:
            self.callback_url = callback_url

    @property
    def export_target_langs(self):
        """Gets the export_target_langs of this ExportByQueryDto.  # noqa: E501


        :return: The export_target_langs of this ExportByQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_target_langs

    @export_target_langs.setter
    def export_target_langs(self, export_target_langs):
        """Sets the export_target_langs of this ExportByQueryDto.


        :param export_target_langs: The export_target_langs of this ExportByQueryDto.  # noqa: E501
        :type: list[str]
        """
        if export_target_langs is None:
            raise ValueError("Invalid value for `export_target_langs`, must not be `None`")  # noqa: E501

        self._export_target_langs = export_target_langs

    @property
    def queries(self):
        """Gets the queries of this ExportByQueryDto.  # noqa: E501


        :return: The queries of this ExportByQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this ExportByQueryDto.


        :param queries: The queries of this ExportByQueryDto.  # noqa: E501
        :type: list[str]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")  # noqa: E501

        self._queries = queries

    @property
    def query_langs(self):
        """Gets the query_langs of this ExportByQueryDto.  # noqa: E501


        :return: The query_langs of this ExportByQueryDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_langs

    @query_langs.setter
    def query_langs(self, query_langs):
        """Sets the query_langs of this ExportByQueryDto.


        :param query_langs: The query_langs of this ExportByQueryDto.  # noqa: E501
        :type: list[str]
        """
        if query_langs is None:
            raise ValueError("Invalid value for `query_langs`, must not be `None`")  # noqa: E501

        self._query_langs = query_langs

    @property
    def created_at_min(self):
        """Gets the created_at_min of this ExportByQueryDto.  # noqa: E501


        :return: The created_at_min of this ExportByQueryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_min

    @created_at_min.setter
    def created_at_min(self, created_at_min):
        """Sets the created_at_min of this ExportByQueryDto.


        :param created_at_min: The created_at_min of this ExportByQueryDto.  # noqa: E501
        :type: datetime
        """

        self._created_at_min = created_at_min

    @property
    def created_at_max(self):
        """Gets the created_at_max of this ExportByQueryDto.  # noqa: E501


        :return: The created_at_max of this ExportByQueryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at_max

    @created_at_max.setter
    def created_at_max(self, created_at_max):
        """Sets the created_at_max of this ExportByQueryDto.


        :param created_at_max: The created_at_max of this ExportByQueryDto.  # noqa: E501
        :type: datetime
        """

        self._created_at_max = created_at_max

    @property
    def modified_at_min(self):
        """Gets the modified_at_min of this ExportByQueryDto.  # noqa: E501


        :return: The modified_at_min of this ExportByQueryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at_min

    @modified_at_min.setter
    def modified_at_min(self, modified_at_min):
        """Sets the modified_at_min of this ExportByQueryDto.


        :param modified_at_min: The modified_at_min of this ExportByQueryDto.  # noqa: E501
        :type: datetime
        """

        self._modified_at_min = modified_at_min

    @property
    def modified_at_max(self):
        """Gets the modified_at_max of this ExportByQueryDto.  # noqa: E501


        :return: The modified_at_max of this ExportByQueryDto.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at_max

    @modified_at_max.setter
    def modified_at_max(self, modified_at_max):
        """Sets the modified_at_max of this ExportByQueryDto.


        :param modified_at_max: The modified_at_max of this ExportByQueryDto.  # noqa: E501
        :type: datetime
        """

        self._modified_at_max = modified_at_max

    @property
    def created_by(self):
        """Gets the created_by of this ExportByQueryDto.  # noqa: E501


        :return: The created_by of this ExportByQueryDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ExportByQueryDto.


        :param created_by: The created_by of this ExportByQueryDto.  # noqa: E501
        :type: IdReference
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """Gets the modified_by of this ExportByQueryDto.  # noqa: E501


        :return: The modified_by of this ExportByQueryDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this ExportByQueryDto.


        :param modified_by: The modified_by of this ExportByQueryDto.  # noqa: E501
        :type: IdReference
        """

        self._modified_by = modified_by

    @property
    def filename(self):
        """Gets the filename of this ExportByQueryDto.  # noqa: E501


        :return: The filename of this ExportByQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this ExportByQueryDto.


        :param filename: The filename of this ExportByQueryDto.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def project(self):
        """Gets the project of this ExportByQueryDto.  # noqa: E501


        :return: The project of this ExportByQueryDto.  # noqa: E501
        :rtype: UidReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ExportByQueryDto.


        :param project: The project of this ExportByQueryDto.  # noqa: E501
        :type: UidReference
        """

        self._project = project

    @property
    def callback_url(self):
        """Gets the callback_url of this ExportByQueryDto.  # noqa: E501


        :return: The callback_url of this ExportByQueryDto.  # noqa: E501
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this ExportByQueryDto.


        :param callback_url: The callback_url of this ExportByQueryDto.  # noqa: E501
        :type: str
        """

        self._callback_url = callback_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportByQueryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportByQueryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
