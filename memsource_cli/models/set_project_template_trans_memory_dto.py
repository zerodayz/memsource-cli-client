# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501


class SetProjectTemplateTransMemoryDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trans_memory': 'IdReference',
        'read_mode': 'bool',
        'write_mode': 'bool',
        'penalty': 'float',
        'apply_penalty_to101_only': 'bool'
    }

    attribute_map = {
        'trans_memory': 'transMemory',
        'read_mode': 'readMode',
        'write_mode': 'writeMode',
        'penalty': 'penalty',
        'apply_penalty_to101_only': 'applyPenaltyTo101Only'
    }

    def __init__(self, trans_memory=None, read_mode=None, write_mode=None, penalty=None, apply_penalty_to101_only=None):  # noqa: E501
        """SetProjectTemplateTransMemoryDto - a model defined in Swagger"""  # noqa: E501

        self._trans_memory = None
        self._read_mode = None
        self._write_mode = None
        self._penalty = None
        self._apply_penalty_to101_only = None
        self.discriminator = None

        self.trans_memory = trans_memory
        if read_mode is not None:
            self.read_mode = read_mode
        if write_mode is not None:
            self.write_mode = write_mode
        if penalty is not None:
            self.penalty = penalty
        if apply_penalty_to101_only is not None:
            self.apply_penalty_to101_only = apply_penalty_to101_only

    @property
    def trans_memory(self):
        """Gets the trans_memory of this SetProjectTemplateTransMemoryDto.  # noqa: E501


        :return: The trans_memory of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :rtype: IdReference
        """
        return self._trans_memory

    @trans_memory.setter
    def trans_memory(self, trans_memory):
        """Sets the trans_memory of this SetProjectTemplateTransMemoryDto.


        :param trans_memory: The trans_memory of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :type: IdReference
        """
        if trans_memory is None:
            raise ValueError("Invalid value for `trans_memory`, must not be `None`")  # noqa: E501

        self._trans_memory = trans_memory

    @property
    def read_mode(self):
        """Gets the read_mode of this SetProjectTemplateTransMemoryDto.  # noqa: E501

        Default: false  # noqa: E501

        :return: The read_mode of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :rtype: bool
        """
        return self._read_mode

    @read_mode.setter
    def read_mode(self, read_mode):
        """Sets the read_mode of this SetProjectTemplateTransMemoryDto.

        Default: false  # noqa: E501

        :param read_mode: The read_mode of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :type: bool
        """

        self._read_mode = read_mode

    @property
    def write_mode(self):
        """Gets the write_mode of this SetProjectTemplateTransMemoryDto.  # noqa: E501

        Can be set only for Translation Memory with read == true.<br/>         Max 2 write TMs allowed per project.<br/>         Default: false  # noqa: E501

        :return: The write_mode of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :rtype: bool
        """
        return self._write_mode

    @write_mode.setter
    def write_mode(self, write_mode):
        """Sets the write_mode of this SetProjectTemplateTransMemoryDto.

        Can be set only for Translation Memory with read == true.<br/>         Max 2 write TMs allowed per project.<br/>         Default: false  # noqa: E501

        :param write_mode: The write_mode of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :type: bool
        """

        self._write_mode = write_mode

    @property
    def penalty(self):
        """Gets the penalty of this SetProjectTemplateTransMemoryDto.  # noqa: E501


        :return: The penalty of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :rtype: float
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this SetProjectTemplateTransMemoryDto.


        :param penalty: The penalty of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :type: float
        """

        self._penalty = penalty

    @property
    def apply_penalty_to101_only(self):
        """Gets the apply_penalty_to101_only of this SetProjectTemplateTransMemoryDto.  # noqa: E501

        Can be set only for penalty == 1<br/>Default: false  # noqa: E501

        :return: The apply_penalty_to101_only of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :rtype: bool
        """
        return self._apply_penalty_to101_only

    @apply_penalty_to101_only.setter
    def apply_penalty_to101_only(self, apply_penalty_to101_only):
        """Sets the apply_penalty_to101_only of this SetProjectTemplateTransMemoryDto.

        Can be set only for penalty == 1<br/>Default: false  # noqa: E501

        :param apply_penalty_to101_only: The apply_penalty_to101_only of this SetProjectTemplateTransMemoryDto.  # noqa: E501
        :type: bool
        """

        self._apply_penalty_to101_only = apply_penalty_to101_only

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetProjectTemplateTransMemoryDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetProjectTemplateTransMemoryDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
