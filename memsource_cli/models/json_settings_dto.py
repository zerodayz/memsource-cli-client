# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JsonSettingsDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_regexp': 'str',
        'html_sub_filter': 'bool',
        'include_key_regexp': 'str',
        'context_note_path': 'str',
        'max_len_path': 'str',
        'context_key_path': 'str'
    }

    attribute_map = {
        'tag_regexp': 'tagRegexp',
        'html_sub_filter': 'htmlSubFilter',
        'include_key_regexp': 'includeKeyRegexp',
        'context_note_path': 'contextNotePath',
        'max_len_path': 'maxLenPath',
        'context_key_path': 'contextKeyPath'
    }

    def __init__(self, tag_regexp=None, html_sub_filter=None, include_key_regexp=None, context_note_path=None, max_len_path=None, context_key_path=None):  # noqa: E501
        """JsonSettingsDto - a model defined in Swagger"""  # noqa: E501

        self._tag_regexp = None
        self._html_sub_filter = None
        self._include_key_regexp = None
        self._context_note_path = None
        self._max_len_path = None
        self._context_key_path = None
        self.discriminator = None

        if tag_regexp is not None:
            self.tag_regexp = tag_regexp
        if html_sub_filter is not None:
            self.html_sub_filter = html_sub_filter
        if include_key_regexp is not None:
            self.include_key_regexp = include_key_regexp
        if context_note_path is not None:
            self.context_note_path = context_note_path
        if max_len_path is not None:
            self.max_len_path = max_len_path
        if context_key_path is not None:
            self.context_key_path = context_key_path

    @property
    def tag_regexp(self):
        """Gets the tag_regexp of this JsonSettingsDto.  # noqa: E501


        :return: The tag_regexp of this JsonSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._tag_regexp

    @tag_regexp.setter
    def tag_regexp(self, tag_regexp):
        """Sets the tag_regexp of this JsonSettingsDto.


        :param tag_regexp: The tag_regexp of this JsonSettingsDto.  # noqa: E501
        :type: str
        """

        self._tag_regexp = tag_regexp

    @property
    def html_sub_filter(self):
        """Gets the html_sub_filter of this JsonSettingsDto.  # noqa: E501

        Default: true  # noqa: E501

        :return: The html_sub_filter of this JsonSettingsDto.  # noqa: E501
        :rtype: bool
        """
        return self._html_sub_filter

    @html_sub_filter.setter
    def html_sub_filter(self, html_sub_filter):
        """Sets the html_sub_filter of this JsonSettingsDto.

        Default: true  # noqa: E501

        :param html_sub_filter: The html_sub_filter of this JsonSettingsDto.  # noqa: E501
        :type: bool
        """

        self._html_sub_filter = html_sub_filter

    @property
    def include_key_regexp(self):
        """Gets the include_key_regexp of this JsonSettingsDto.  # noqa: E501


        :return: The include_key_regexp of this JsonSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._include_key_regexp

    @include_key_regexp.setter
    def include_key_regexp(self, include_key_regexp):
        """Sets the include_key_regexp of this JsonSettingsDto.


        :param include_key_regexp: The include_key_regexp of this JsonSettingsDto.  # noqa: E501
        :type: str
        """

        self._include_key_regexp = include_key_regexp

    @property
    def context_note_path(self):
        """Gets the context_note_path of this JsonSettingsDto.  # noqa: E501


        :return: The context_note_path of this JsonSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_note_path

    @context_note_path.setter
    def context_note_path(self, context_note_path):
        """Sets the context_note_path of this JsonSettingsDto.


        :param context_note_path: The context_note_path of this JsonSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_note_path = context_note_path

    @property
    def max_len_path(self):
        """Gets the max_len_path of this JsonSettingsDto.  # noqa: E501


        :return: The max_len_path of this JsonSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._max_len_path

    @max_len_path.setter
    def max_len_path(self, max_len_path):
        """Sets the max_len_path of this JsonSettingsDto.


        :param max_len_path: The max_len_path of this JsonSettingsDto.  # noqa: E501
        :type: str
        """

        self._max_len_path = max_len_path

    @property
    def context_key_path(self):
        """Gets the context_key_path of this JsonSettingsDto.  # noqa: E501


        :return: The context_key_path of this JsonSettingsDto.  # noqa: E501
        :rtype: str
        """
        return self._context_key_path

    @context_key_path.setter
    def context_key_path(self, context_key_path):
        """Sets the context_key_path of this JsonSettingsDto.


        :param context_key_path: The context_key_path of this JsonSettingsDto.  # noqa: E501
        :type: str
        """

        self._context_key_path = context_key_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JsonSettingsDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JsonSettingsDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
