# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.tag_metadata_dto import TagMetadataDto  # noqa: F401,E501


class SegmentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_lang': 'str',
        'source_segment': 'str',
        'target_segment': 'str',
        'previous_source_segment': 'str',
        'next_source_segment': 'str',
        'source_tag_metadata': 'list[TagMetadataDto]',
        'target_tag_metadata': 'list[TagMetadataDto]'
    }

    attribute_map = {
        'target_lang': 'targetLang',
        'source_segment': 'sourceSegment',
        'target_segment': 'targetSegment',
        'previous_source_segment': 'previousSourceSegment',
        'next_source_segment': 'nextSourceSegment',
        'source_tag_metadata': 'sourceTagMetadata',
        'target_tag_metadata': 'targetTagMetadata'
    }

    def __init__(self, target_lang=None, source_segment=None, target_segment=None, previous_source_segment=None, next_source_segment=None, source_tag_metadata=None, target_tag_metadata=None):  # noqa: E501
        """SegmentDto - a model defined in Swagger"""  # noqa: E501

        self._target_lang = None
        self._source_segment = None
        self._target_segment = None
        self._previous_source_segment = None
        self._next_source_segment = None
        self._source_tag_metadata = None
        self._target_tag_metadata = None
        self.discriminator = None

        self.target_lang = target_lang
        self.source_segment = source_segment
        self.target_segment = target_segment
        if previous_source_segment is not None:
            self.previous_source_segment = previous_source_segment
        if next_source_segment is not None:
            self.next_source_segment = next_source_segment
        if source_tag_metadata is not None:
            self.source_tag_metadata = source_tag_metadata
        if target_tag_metadata is not None:
            self.target_tag_metadata = target_tag_metadata

    @property
    def target_lang(self):
        """Gets the target_lang of this SegmentDto.  # noqa: E501


        :return: The target_lang of this SegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._target_lang

    @target_lang.setter
    def target_lang(self, target_lang):
        """Sets the target_lang of this SegmentDto.


        :param target_lang: The target_lang of this SegmentDto.  # noqa: E501
        :type: str
        """
        if target_lang is None:
            raise ValueError("Invalid value for `target_lang`, must not be `None`")  # noqa: E501

        self._target_lang = target_lang

    @property
    def source_segment(self):
        """Gets the source_segment of this SegmentDto.  # noqa: E501


        :return: The source_segment of this SegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._source_segment

    @source_segment.setter
    def source_segment(self, source_segment):
        """Sets the source_segment of this SegmentDto.


        :param source_segment: The source_segment of this SegmentDto.  # noqa: E501
        :type: str
        """
        if source_segment is None:
            raise ValueError("Invalid value for `source_segment`, must not be `None`")  # noqa: E501

        self._source_segment = source_segment

    @property
    def target_segment(self):
        """Gets the target_segment of this SegmentDto.  # noqa: E501


        :return: The target_segment of this SegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._target_segment

    @target_segment.setter
    def target_segment(self, target_segment):
        """Sets the target_segment of this SegmentDto.


        :param target_segment: The target_segment of this SegmentDto.  # noqa: E501
        :type: str
        """
        if target_segment is None:
            raise ValueError("Invalid value for `target_segment`, must not be `None`")  # noqa: E501

        self._target_segment = target_segment

    @property
    def previous_source_segment(self):
        """Gets the previous_source_segment of this SegmentDto.  # noqa: E501


        :return: The previous_source_segment of this SegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._previous_source_segment

    @previous_source_segment.setter
    def previous_source_segment(self, previous_source_segment):
        """Sets the previous_source_segment of this SegmentDto.


        :param previous_source_segment: The previous_source_segment of this SegmentDto.  # noqa: E501
        :type: str
        """

        self._previous_source_segment = previous_source_segment

    @property
    def next_source_segment(self):
        """Gets the next_source_segment of this SegmentDto.  # noqa: E501


        :return: The next_source_segment of this SegmentDto.  # noqa: E501
        :rtype: str
        """
        return self._next_source_segment

    @next_source_segment.setter
    def next_source_segment(self, next_source_segment):
        """Sets the next_source_segment of this SegmentDto.


        :param next_source_segment: The next_source_segment of this SegmentDto.  # noqa: E501
        :type: str
        """

        self._next_source_segment = next_source_segment

    @property
    def source_tag_metadata(self):
        """Gets the source_tag_metadata of this SegmentDto.  # noqa: E501


        :return: The source_tag_metadata of this SegmentDto.  # noqa: E501
        :rtype: list[TagMetadataDto]
        """
        return self._source_tag_metadata

    @source_tag_metadata.setter
    def source_tag_metadata(self, source_tag_metadata):
        """Sets the source_tag_metadata of this SegmentDto.


        :param source_tag_metadata: The source_tag_metadata of this SegmentDto.  # noqa: E501
        :type: list[TagMetadataDto]
        """

        self._source_tag_metadata = source_tag_metadata

    @property
    def target_tag_metadata(self):
        """Gets the target_tag_metadata of this SegmentDto.  # noqa: E501


        :return: The target_tag_metadata of this SegmentDto.  # noqa: E501
        :rtype: list[TagMetadataDto]
        """
        return self._target_tag_metadata

    @target_tag_metadata.setter
    def target_tag_metadata(self, target_tag_metadata):
        """Sets the target_tag_metadata of this SegmentDto.


        :param target_tag_metadata: The target_tag_metadata of this SegmentDto.  # noqa: E501
        :type: list[TagMetadataDto]
        """

        self._target_tag_metadata = target_tag_metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SegmentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SegmentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
