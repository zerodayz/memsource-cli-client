# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.edition_dto import EditionDto  # noqa: F401,E501
from memsource_cli.models.features_dto import FeaturesDto  # noqa: F401,E501
from memsource_cli.models.organization_reference import OrganizationReference  # noqa: F401,E501
from memsource_cli.models.user_reference import UserReference  # noqa: F401,E501


class LoginUserDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'UserReference',
        'csrf_token': 'str',
        'organization': 'OrganizationReference',
        'edition': 'EditionDto',
        'features': 'FeaturesDto'
    }

    attribute_map = {
        'user': 'user',
        'csrf_token': 'csrfToken',
        'organization': 'organization',
        'edition': 'edition',
        'features': 'features'
    }

    def __init__(self, user=None, csrf_token=None, organization=None, edition=None, features=None):  # noqa: E501
        """LoginUserDto - a model defined in Swagger"""  # noqa: E501

        self._user = None
        self._csrf_token = None
        self._organization = None
        self._edition = None
        self._features = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if csrf_token is not None:
            self.csrf_token = csrf_token
        if organization is not None:
            self.organization = organization
        if edition is not None:
            self.edition = edition
        if features is not None:
            self.features = features

    @property
    def user(self):
        """Gets the user of this LoginUserDto.  # noqa: E501


        :return: The user of this LoginUserDto.  # noqa: E501
        :rtype: UserReference
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this LoginUserDto.


        :param user: The user of this LoginUserDto.  # noqa: E501
        :type: UserReference
        """

        self._user = user

    @property
    def csrf_token(self):
        """Gets the csrf_token of this LoginUserDto.  # noqa: E501


        :return: The csrf_token of this LoginUserDto.  # noqa: E501
        :rtype: str
        """
        return self._csrf_token

    @csrf_token.setter
    def csrf_token(self, csrf_token):
        """Sets the csrf_token of this LoginUserDto.


        :param csrf_token: The csrf_token of this LoginUserDto.  # noqa: E501
        :type: str
        """

        self._csrf_token = csrf_token

    @property
    def organization(self):
        """Gets the organization of this LoginUserDto.  # noqa: E501


        :return: The organization of this LoginUserDto.  # noqa: E501
        :rtype: OrganizationReference
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this LoginUserDto.


        :param organization: The organization of this LoginUserDto.  # noqa: E501
        :type: OrganizationReference
        """

        self._organization = organization

    @property
    def edition(self):
        """Gets the edition of this LoginUserDto.  # noqa: E501


        :return: The edition of this LoginUserDto.  # noqa: E501
        :rtype: EditionDto
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this LoginUserDto.


        :param edition: The edition of this LoginUserDto.  # noqa: E501
        :type: EditionDto
        """

        self._edition = edition

    @property
    def features(self):
        """Gets the features of this LoginUserDto.  # noqa: E501


        :return: The features of this LoginUserDto.  # noqa: E501
        :rtype: FeaturesDto
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this LoginUserDto.


        :param features: The features of this LoginUserDto.  # noqa: E501
        :type: FeaturesDto
        """

        self._features = features

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginUserDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginUserDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
