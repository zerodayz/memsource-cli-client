# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScimResourceDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_results': 'int',
        'items_per_page': 'int',
        'start_index': 'int',
        'schemas': 'list[str]',
        'resources': 'list[object]'
    }

    attribute_map = {
        'total_results': 'totalResults',
        'items_per_page': 'itemsPerPage',
        'start_index': 'startIndex',
        'schemas': 'schemas',
        'resources': 'resources'
    }

    def __init__(self, total_results=None, items_per_page=None, start_index=None, schemas=None, resources=None):  # noqa: E501
        """ScimResourceDto - a model defined in Swagger"""  # noqa: E501

        self._total_results = None
        self._items_per_page = None
        self._start_index = None
        self._schemas = None
        self._resources = None
        self.discriminator = None

        if total_results is not None:
            self.total_results = total_results
        if items_per_page is not None:
            self.items_per_page = items_per_page
        if start_index is not None:
            self.start_index = start_index
        if schemas is not None:
            self.schemas = schemas
        if resources is not None:
            self.resources = resources

    @property
    def total_results(self):
        """Gets the total_results of this ScimResourceDto.  # noqa: E501


        :return: The total_results of this ScimResourceDto.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this ScimResourceDto.


        :param total_results: The total_results of this ScimResourceDto.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    @property
    def items_per_page(self):
        """Gets the items_per_page of this ScimResourceDto.  # noqa: E501


        :return: The items_per_page of this ScimResourceDto.  # noqa: E501
        :rtype: int
        """
        return self._items_per_page

    @items_per_page.setter
    def items_per_page(self, items_per_page):
        """Sets the items_per_page of this ScimResourceDto.


        :param items_per_page: The items_per_page of this ScimResourceDto.  # noqa: E501
        :type: int
        """

        self._items_per_page = items_per_page

    @property
    def start_index(self):
        """Gets the start_index of this ScimResourceDto.  # noqa: E501


        :return: The start_index of this ScimResourceDto.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this ScimResourceDto.


        :param start_index: The start_index of this ScimResourceDto.  # noqa: E501
        :type: int
        """

        self._start_index = start_index

    @property
    def schemas(self):
        """Gets the schemas of this ScimResourceDto.  # noqa: E501


        :return: The schemas of this ScimResourceDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ScimResourceDto.


        :param schemas: The schemas of this ScimResourceDto.  # noqa: E501
        :type: list[str]
        """

        self._schemas = schemas

    @property
    def resources(self):
        """Gets the resources of this ScimResourceDto.  # noqa: E501


        :return: The resources of this ScimResourceDto.  # noqa: E501
        :rtype: list[object]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ScimResourceDto.


        :param resources: The resources of this ScimResourceDto.  # noqa: E501
        :type: list[object]
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScimResourceDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScimResourceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
