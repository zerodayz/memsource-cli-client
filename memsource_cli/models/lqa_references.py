# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.lqa_reference import LQAReference  # noqa: F401,E501


class LQAReferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'str',
        'trans_group_id': 'int',
        'segment_id': 'str',
        'conversation_title': 'str',
        'lqa': 'list[LQAReference]'
    }

    attribute_map = {
        'task_id': 'taskId',
        'trans_group_id': 'transGroupId',
        'segment_id': 'segmentId',
        'conversation_title': 'conversationTitle',
        'lqa': 'lqa'
    }

    def __init__(self, task_id=None, trans_group_id=None, segment_id=None, conversation_title=None, lqa=None):  # noqa: E501
        """LQAReferences - a model defined in Swagger"""  # noqa: E501

        self._task_id = None
        self._trans_group_id = None
        self._segment_id = None
        self._conversation_title = None
        self._lqa = None
        self.discriminator = None

        if task_id is not None:
            self.task_id = task_id
        self.trans_group_id = trans_group_id
        self.segment_id = segment_id
        if conversation_title is not None:
            self.conversation_title = conversation_title
        self.lqa = lqa

    @property
    def task_id(self):
        """Gets the task_id of this LQAReferences.  # noqa: E501


        :return: The task_id of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this LQAReferences.


        :param task_id: The task_id of this LQAReferences.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def trans_group_id(self):
        """Gets the trans_group_id of this LQAReferences.  # noqa: E501


        :return: The trans_group_id of this LQAReferences.  # noqa: E501
        :rtype: int
        """
        return self._trans_group_id

    @trans_group_id.setter
    def trans_group_id(self, trans_group_id):
        """Sets the trans_group_id of this LQAReferences.


        :param trans_group_id: The trans_group_id of this LQAReferences.  # noqa: E501
        :type: int
        """
        if trans_group_id is None:
            raise ValueError("Invalid value for `trans_group_id`, must not be `None`")  # noqa: E501
        if trans_group_id is not None and trans_group_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `trans_group_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._trans_group_id = trans_group_id

    @property
    def segment_id(self):
        """Gets the segment_id of this LQAReferences.  # noqa: E501


        :return: The segment_id of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this LQAReferences.


        :param segment_id: The segment_id of this LQAReferences.  # noqa: E501
        :type: str
        """
        if segment_id is None:
            raise ValueError("Invalid value for `segment_id`, must not be `None`")  # noqa: E501

        self._segment_id = segment_id

    @property
    def conversation_title(self):
        """Gets the conversation_title of this LQAReferences.  # noqa: E501


        :return: The conversation_title of this LQAReferences.  # noqa: E501
        :rtype: str
        """
        return self._conversation_title

    @conversation_title.setter
    def conversation_title(self, conversation_title):
        """Sets the conversation_title of this LQAReferences.


        :param conversation_title: The conversation_title of this LQAReferences.  # noqa: E501
        :type: str
        """

        self._conversation_title = conversation_title

    @property
    def lqa(self):
        """Gets the lqa of this LQAReferences.  # noqa: E501


        :return: The lqa of this LQAReferences.  # noqa: E501
        :rtype: list[LQAReference]
        """
        return self._lqa

    @lqa.setter
    def lqa(self, lqa):
        """Sets the lqa of this LQAReferences.


        :param lqa: The lqa of this LQAReferences.  # noqa: E501
        :type: list[LQAReference]
        """
        if lqa is None:
            raise ValueError("Invalid value for `lqa`, must not be `None`")  # noqa: E501

        self._lqa = lqa

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LQAReferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LQAReferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
