# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.segment_reference import SegmentReference  # noqa: F401,E501


class QualityAssuranceRunDtoV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initial_segment': 'SegmentReference',
        'max_qa_warnings_count': 'int',
        'warning_types': 'list[str]'
    }

    attribute_map = {
        'initial_segment': 'initialSegment',
        'max_qa_warnings_count': 'maxQaWarningsCount',
        'warning_types': 'warningTypes'
    }

    def __init__(self, initial_segment=None, max_qa_warnings_count=None, warning_types=None):  # noqa: E501
        """QualityAssuranceRunDtoV3 - a model defined in Swagger"""  # noqa: E501

        self._initial_segment = None
        self._max_qa_warnings_count = None
        self._warning_types = None
        self.discriminator = None

        if initial_segment is not None:
            self.initial_segment = initial_segment
        if max_qa_warnings_count is not None:
            self.max_qa_warnings_count = max_qa_warnings_count
        if warning_types is not None:
            self.warning_types = warning_types

    @property
    def initial_segment(self):
        """Gets the initial_segment of this QualityAssuranceRunDtoV3.  # noqa: E501


        :return: The initial_segment of this QualityAssuranceRunDtoV3.  # noqa: E501
        :rtype: SegmentReference
        """
        return self._initial_segment

    @initial_segment.setter
    def initial_segment(self, initial_segment):
        """Sets the initial_segment of this QualityAssuranceRunDtoV3.


        :param initial_segment: The initial_segment of this QualityAssuranceRunDtoV3.  # noqa: E501
        :type: SegmentReference
        """

        self._initial_segment = initial_segment

    @property
    def max_qa_warnings_count(self):
        """Gets the max_qa_warnings_count of this QualityAssuranceRunDtoV3.  # noqa: E501

        Maximum number of QA warnings in result, default: 100. For efficiency reasons QA warnings are processed with minimum segments chunk size 10, therefore slightly more warnings are returned.  # noqa: E501

        :return: The max_qa_warnings_count of this QualityAssuranceRunDtoV3.  # noqa: E501
        :rtype: int
        """
        return self._max_qa_warnings_count

    @max_qa_warnings_count.setter
    def max_qa_warnings_count(self, max_qa_warnings_count):
        """Sets the max_qa_warnings_count of this QualityAssuranceRunDtoV3.

        Maximum number of QA warnings in result, default: 100. For efficiency reasons QA warnings are processed with minimum segments chunk size 10, therefore slightly more warnings are returned.  # noqa: E501

        :param max_qa_warnings_count: The max_qa_warnings_count of this QualityAssuranceRunDtoV3.  # noqa: E501
        :type: int
        """
        if max_qa_warnings_count is not None and max_qa_warnings_count > 1000:  # noqa: E501
            raise ValueError("Invalid value for `max_qa_warnings_count`, must be a value less than or equal to `1000`")  # noqa: E501
        if max_qa_warnings_count is not None and max_qa_warnings_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_qa_warnings_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_qa_warnings_count = max_qa_warnings_count

    @property
    def warning_types(self):
        """Gets the warning_types of this QualityAssuranceRunDtoV3.  # noqa: E501


        :return: The warning_types of this QualityAssuranceRunDtoV3.  # noqa: E501
        :rtype: list[str]
        """
        return self._warning_types

    @warning_types.setter
    def warning_types(self, warning_types):
        """Sets the warning_types of this QualityAssuranceRunDtoV3.


        :param warning_types: The warning_types of this QualityAssuranceRunDtoV3.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["EmptyTranslation", "TrailingPunctuation", "Formatting", "JoinTags", "MissingNumbers", "MultipleSpaces", "NonConformingTerm", "NotConfirmed", "TranslationLength", "TrailingSpace", "UnresolvedComment", "EmptyPairTags", "InconsistentTranslationTargetSource", "InconsistentTranslationSourceTarget", "ForbiddenString", "SpellCheck", "RepeatedWords", "InconsistentTagContent", "EmptyTagContent", "Malformed", "ForbiddenTerm", "NewerAtLowerLevel", "LeadingAndTrailingSpaces", "TargetSourceIdentical", "SourceOrTargetRegexp", "UnmodifiedFuzzyTranslation", "Moravia", "ExtraNumbers", "UnresolvedConversation", "NestedTags"]  # noqa: E501
        if not set(warning_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `warning_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(warning_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._warning_types = warning_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualityAssuranceRunDtoV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualityAssuranceRunDtoV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
