# coding: utf-8

"""
    Memsource REST API

    Welcome to Memsource's API documentation. To view our legacy APIs please [visit our documentation](https://wiki.memsource.com/wiki/Memsource_API) and for more information about our new APIs, [visit our blog](https://www.memsource.com/blog/2017/10/24/introducing-rest-apis-qa-with-the-memsource-api-team/).    If you have any questions, please contact [Memsource Support](<mailto:support@memsource.com>).  # noqa: E501

    OpenAPI spec version: Latest
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from memsource_cli.models.id_reference import IdReference  # noqa: F401,E501


class TranslationPriceSetBulkPricesDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_languages': 'list[str]',
        'target_languages': 'list[str]',
        'price': 'float',
        'workflow_steps': 'list[IdReference]'
    }

    attribute_map = {
        'source_languages': 'sourceLanguages',
        'target_languages': 'targetLanguages',
        'price': 'price',
        'workflow_steps': 'workflowSteps'
    }

    def __init__(self, source_languages=None, target_languages=None, price=None, workflow_steps=None):  # noqa: E501
        """TranslationPriceSetBulkPricesDto - a model defined in Swagger"""  # noqa: E501

        self._source_languages = None
        self._target_languages = None
        self._price = None
        self._workflow_steps = None
        self.discriminator = None

        if source_languages is not None:
            self.source_languages = source_languages
        if target_languages is not None:
            self.target_languages = target_languages
        if price is not None:
            self.price = price
        if workflow_steps is not None:
            self.workflow_steps = workflow_steps

    @property
    def source_languages(self):
        """Gets the source_languages of this TranslationPriceSetBulkPricesDto.  # noqa: E501


        :return: The source_languages of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_languages

    @source_languages.setter
    def source_languages(self, source_languages):
        """Sets the source_languages of this TranslationPriceSetBulkPricesDto.


        :param source_languages: The source_languages of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :type: list[str]
        """

        self._source_languages = source_languages

    @property
    def target_languages(self):
        """Gets the target_languages of this TranslationPriceSetBulkPricesDto.  # noqa: E501


        :return: The target_languages of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._target_languages

    @target_languages.setter
    def target_languages(self, target_languages):
        """Sets the target_languages of this TranslationPriceSetBulkPricesDto.


        :param target_languages: The target_languages of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :type: list[str]
        """

        self._target_languages = target_languages

    @property
    def price(self):
        """Gets the price of this TranslationPriceSetBulkPricesDto.  # noqa: E501


        :return: The price of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this TranslationPriceSetBulkPricesDto.


        :param price: The price of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def workflow_steps(self):
        """Gets the workflow_steps of this TranslationPriceSetBulkPricesDto.  # noqa: E501


        :return: The workflow_steps of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :rtype: list[IdReference]
        """
        return self._workflow_steps

    @workflow_steps.setter
    def workflow_steps(self, workflow_steps):
        """Sets the workflow_steps of this TranslationPriceSetBulkPricesDto.


        :param workflow_steps: The workflow_steps of this TranslationPriceSetBulkPricesDto.  # noqa: E501
        :type: list[IdReference]
        """

        self._workflow_steps = workflow_steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranslationPriceSetBulkPricesDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslationPriceSetBulkPricesDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
